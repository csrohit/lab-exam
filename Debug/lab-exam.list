
lab-exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005edc  08005edc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee4  08005ee4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004130  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200041a4  200041a4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017662  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d8  00000000  00000000  00037706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0003a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  0003bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023528  00000000  00000000  0003cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015320  00000000  00000000  00060270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9344  00000000  00000000  00075590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e8d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005388  00000000  00000000  0014e924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005da0 	.word	0x08005da0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005da0 	.word	0x08005da0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000090 	.word	0x20000090
 80005a4:	20000144 	.word	0x20000144

080005a8 <vLedBlinkPeriodic>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vLedBlinkPeriodic(void *pvParam) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	TickType_t xTicks = xTaskGetTickCount();
 80005b0:	f003 fe06 	bl	80041c0 <xTaskGetTickCount>
 80005b4:	4603      	mov	r3, r0
 80005b6:	60fb      	str	r3, [r7, #12]
	while(1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <vLedBlinkPeriodic+0x2c>)
 80005be:	f000 fee6 	bl	800138e <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xTicks, 500 / portTICK_RATE_MS);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fc32 	bl	8003e34 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005d0:	e7f2      	b.n	80005b8 <vLedBlinkPeriodic+0x10>
 80005d2:	bf00      	nop
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <HAL_GPIO_EXTI_Callback>:
	}
	vTaskDelete(NULL);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	// V(xSwitchSemaFlag);
	xSemaphoreGiveFromISR(xSwitchSemaFlag, &xHigherPriorityTaskWoken);
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_GPIO_EXTI_Callback+0x38>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f107 020c 	add.w	r2, r7, #12
 80005ea:	4611      	mov	r1, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 f810 	bl	8003612 <xQueueGiveFromISR>
	// Invoke the scheduler
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d007      	beq.n	8000608 <HAL_GPIO_EXTI_Callback+0x30>
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	f3bf 8f6f 	isb	sy
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200003ac 	.word	0x200003ac
 8000614:	e000ed04 	.word	0xe000ed04

08000618 <vSwitchIntrHandler>:

void vSwitchIntrHandler(void *pvParam) {
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b09b      	sub	sp, #108	; 0x6c
 800061c:	af04      	add	r7, sp, #16
 800061e:	6078      	str	r0, [r7, #4]
	// P(xSwitchSemaFlag);
	xSemaphoreTake(xSwitchSemaFlag, 0);
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <vSwitchIntrHandler+0xac>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 f880 	bl	800372c <xQueueSemaphoreTake>

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;
	while(1) {
		// P(xSwitchSemaFlag);
		xSemaphoreTake(xSwitchSemaFlag, portMAX_DELAY);
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <vSwitchIntrHandler+0xac>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000634:	4618      	mov	r0, r3
 8000636:	f003 f879 	bl	800372c <xQueueSemaphoreTake>
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	4821      	ldr	r0, [pc, #132]	; (80006c8 <vSwitchIntrHandler+0xb0>)
 8000644:	f001 fd92 	bl	800216c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	2200      	movs	r2, #0
 800064e:	4619      	mov	r1, r3
 8000650:	481d      	ldr	r0, [pc, #116]	; (80006c8 <vSwitchIntrHandler+0xb0>)
 8000652:	f001 fe6d 	bl	8002330 <HAL_RTC_GetDate>

		len = sprintf(data, "E3: Rohit Nimkar - %2d-%2d-%4d %2d:%2d:%2d\r\n", date.Date, date.Month,
 8000656:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800065a:	461d      	mov	r5, r3
 800065c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000660:	461e      	mov	r6, r3
				date.Year + 2022U, time.Hours, time.Minutes, time.Seconds);
 8000662:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
		len = sprintf(data, "E3: Rohit Nimkar - %2d-%2d-%4d %2d:%2d:%2d\r\n", date.Date, date.Month,
 8000666:	f203 73e6 	addw	r3, r3, #2022	; 0x7e6
				date.Year + 2022U, time.Hours, time.Minutes, time.Seconds);
 800066a:	7b3a      	ldrb	r2, [r7, #12]
 800066c:	7b79      	ldrb	r1, [r7, #13]
 800066e:	7bb8      	ldrb	r0, [r7, #14]
		len = sprintf(data, "E3: Rohit Nimkar - %2d-%2d-%4d %2d:%2d:%2d\r\n", date.Date, date.Month,
 8000670:	4604      	mov	r4, r0
 8000672:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000676:	9403      	str	r4, [sp, #12]
 8000678:	9102      	str	r1, [sp, #8]
 800067a:	9201      	str	r2, [sp, #4]
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4633      	mov	r3, r6
 8000680:	462a      	mov	r2, r5
 8000682:	4912      	ldr	r1, [pc, #72]	; (80006cc <vSwitchIntrHandler+0xb4>)
 8000684:	f004 ffd2 	bl	800562c <siprintf>
 8000688:	4603      	mov	r3, r0
 800068a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		HAL_UART_Transmit(&huart2, data, len, HAL_MAX_DELAY);
 800068e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000692:	b29a      	uxth	r2, r3
 8000694:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <vSwitchIntrHandler+0xb8>)
 800069e:	f002 fa4e 	bl	8002b3e <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <vSwitchIntrHandler+0xbc>)
 80006aa:	f000 fe57 	bl	800135c <HAL_GPIO_WritePin>
		vTaskDelay(1000 / portTICK_RATE_MS);
 80006ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b2:	f003 fc3d 	bl	8003f30 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <vSwitchIntrHandler+0xbc>)
 80006be:	f000 fe4d 	bl	800135c <HAL_GPIO_WritePin>
	while(1) {
 80006c2:	e7b3      	b.n	800062c <vSwitchIntrHandler+0x14>
 80006c4:	200003ac 	.word	0x200003ac
 80006c8:	20000344 	.word	0x20000344
 80006cc:	08005dc4 	.word	0x08005dc4
 80006d0:	20000364 	.word	0x20000364
 80006d4:	40020c00 	.word	0x40020c00

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fb7d 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f855 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f943 	bl	8000970 <MX_GPIO_Init>
  MX_RTC_Init();
 80006ea:	f000 f8bd 	bl	8000868 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80006ee:	f000 f915 	bl	800091c <MX_USART2_UART_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  xSwitchSemaFlag = xSemaphoreCreateBinary();
 80006f2:	2203      	movs	r2, #3
 80006f4:	2100      	movs	r1, #0
 80006f6:	2001      	movs	r0, #1
 80006f8:	f002 ff32 	bl	8003560 <xQueueGenericCreate>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <main+0x9c>)
 8000700:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <main+0xa0>)
 8000704:	463c      	mov	r4, r7
 8000706:	461d      	mov	r5, r3
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000714:	463b      	mov	r3, r7
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fda4 	bl	8003266 <osThreadCreate>
 800071e:	4603      	mov	r3, r0
 8000720:	4a16      	ldr	r2, [pc, #88]	; (800077c <main+0xa4>)
 8000722:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xRet = xTaskCreate(vLedBlinkPeriodic, "LedBlink", 128, NULL, 2, NULL);
 8000724:	2300      	movs	r3, #0
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	2302      	movs	r3, #2
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	4913      	ldr	r1, [pc, #76]	; (8000780 <main+0xa8>)
 8000732:	4814      	ldr	r0, [pc, #80]	; (8000784 <main+0xac>)
 8000734:	f003 fa31 	bl	8003b9a <xTaskCreate>
 8000738:	61f8      	str	r0, [r7, #28]
  if(xRet != pdTRUE)
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d001      	beq.n	8000744 <main+0x6c>
	  Error_Handler();
 8000740:	f000 f99a 	bl	8000a78 <Error_Handler>

  xRet = xTaskCreate(vSwitchIntrHandler, "SwitchIntr", 128, NULL, configMAX_PRIORITIES-1, NULL);
 8000744:	2300      	movs	r3, #0
 8000746:	9301      	str	r3, [sp, #4]
 8000748:	2306      	movs	r3, #6
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2300      	movs	r3, #0
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	490d      	ldr	r1, [pc, #52]	; (8000788 <main+0xb0>)
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <main+0xb4>)
 8000754:	f003 fa21 	bl	8003b9a <xTaskCreate>
 8000758:	61f8      	str	r0, [r7, #28]
  if(xRet != pdTRUE)
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d001      	beq.n	8000764 <main+0x8c>
	  Error_Handler();
 8000760:	f000 f98a 	bl	8000a78 <Error_Handler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000764:	f002 fd78 	bl	8003258 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vSemaphoreDelete(xSwitchSemaFlag);
 8000768:	4b02      	ldr	r3, [pc, #8]	; (8000774 <main+0x9c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f003 f8e9 	bl	8003944 <vQueueDelete>
	while (1)
 8000772:	e7fe      	b.n	8000772 <main+0x9a>
 8000774:	200003ac 	.word	0x200003ac
 8000778:	08005e0c 	.word	0x08005e0c
 800077c:	200003a8 	.word	0x200003a8
 8000780:	08005df4 	.word	0x08005df4
 8000784:	080005a9 	.word	0x080005a9
 8000788:	08005e00 	.word	0x08005e00
 800078c:	08000619 	.word	0x08000619

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 fe2e 	bl	8005400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <SystemClock_Config+0xd0>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a28      	ldr	r2, [pc, #160]	; (8000860 <SystemClock_Config+0xd0>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <SystemClock_Config+0xd4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <SystemClock_Config+0xd4>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <SystemClock_Config+0xd4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007ec:	2309      	movs	r3, #9
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000808:	23a8      	movs	r3, #168	; 0xa8
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000810:	2307      	movs	r3, #7
 8000812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fdeb 	bl	80013f4 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000824:	f000 f928 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000834:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2105      	movs	r1, #5
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f84c 	bl	80018e4 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000852:	f000 f911 	bl	8000a78 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_RTC_Init+0xac>)
 8000882:	4a25      	ldr	r2, [pc, #148]	; (8000918 <MX_RTC_Init+0xb0>)
 8000884:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <MX_RTC_Init+0xac>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_RTC_Init+0xac>)
 800088e:	227f      	movs	r2, #127	; 0x7f
 8000890:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_RTC_Init+0xac>)
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_RTC_Init+0xac>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_RTC_Init+0xac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_RTC_Init+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008aa:	481a      	ldr	r0, [pc, #104]	; (8000914 <MX_RTC_Init+0xac>)
 80008ac:	f001 fb4e 	bl	8001f4c <HAL_RTC_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f8df 	bl	8000a78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 80008ba:	2311      	movs	r3, #17
 80008bc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x59;
 80008be:	2359      	movs	r3, #89	; 0x59
 80008c0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 80008c2:	2350      	movs	r3, #80	; 0x50
 80008c4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <MX_RTC_Init+0xac>)
 80008d6:	f001 fbaf 	bl	8002038 <HAL_RTC_SetTime>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f8ca 	bl	8000a78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80008e4:	2303      	movs	r3, #3
 80008e6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80008e8:	2308      	movs	r3, #8
 80008ea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x3;
 80008ec:	2303      	movs	r3, #3
 80008ee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2201      	movs	r2, #1
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_RTC_Init+0xac>)
 80008fc:	f001 fc94 	bl	8002228 <HAL_RTC_SetDate>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000906:	f000 f8b7 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000344 	.word	0x20000344
 8000918:	40002800 	.word	0x40002800

0800091c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_USART2_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000954:	f002 f8a6 	bl	8002aa4 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095e:	f000 f88b 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000364 	.word	0x20000364
 800096c:	40004400 	.word	0x40004400

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <MX_GPIO_Init+0xc8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <MX_GPIO_Init+0xc8>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xc8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_GPIO_Init+0xc8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_GPIO_Init+0xc8>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_GPIO_Init+0xc8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_GPIO_Init+0xc8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_GPIO_Init+0xc8>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_GPIO_Init+0xc8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009e0:	4816      	ldr	r0, [pc, #88]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009e2:	f000 fcbb 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e6:	2301      	movs	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009fc:	f000 fb12 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a00:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <MX_GPIO_Init+0xcc>)
 8000a1a:	f000 fb03 	bl	8001024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2105      	movs	r1, #5
 8000a22:	2006      	movs	r0, #6
 8000a24:	f000 fad4 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a28:	2006      	movs	r0, #6
 8000a2a:	f000 faed 	bl	8001008 <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020000 	.word	0x40020000

08000a44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f002 fc56 	bl	80032fe <osDelay>
 8000a52:	e7fb      	b.n	8000a4c <StartDefaultTask+0x8>

08000a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a66:	f000 f9db 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010000 	.word	0x40010000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_MspInit+0x54>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <HAL_MspInit+0x54>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x54>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_MspInit+0x54>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_MspInit+0x54>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_MspInit+0x54>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	f06f 0001 	mvn.w	r0, #1
 8000aca:	f000 fa81 	bl	8000fd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_RTC_MspInit+0x4c>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d111      	bne.n	8000b20 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000afc:	2302      	movs	r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b04:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 f93c 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b16:	f7ff ffaf 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <HAL_RTC_MspInit+0x50>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40002800 	.word	0x40002800
 8000b2c:	42470e3c 	.word	0x42470e3c

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_UART_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_UART_MspInit+0x8c>)
 8000ba6:	f000 fa3d 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	; 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <HAL_InitTick+0xd4>)
 8000bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd8:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <HAL_InitTick+0xd4>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6453      	str	r3, [r2, #68]	; 0x44
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <HAL_InitTick+0xd4>)
 8000be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bec:	f107 020c 	add.w	r2, r7, #12
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 f894 	bl	8001d24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bfc:	f001 f87e 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8000c00:	4603      	mov	r3, r0
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <HAL_InitTick+0xd8>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9b      	lsrs	r3, r3, #18
 8000c10:	3b01      	subs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_InitTick+0xdc>)
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <HAL_InitTick+0xe0>)
 8000c18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_InitTick+0xdc>)
 8000c1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c22:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <HAL_InitTick+0xdc>)
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_InitTick+0xdc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_InitTick+0xdc>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_InitTick+0xdc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c3a:	4818      	ldr	r0, [pc, #96]	; (8000c9c <HAL_InitTick+0xdc>)
 8000c3c:	f001 fc84 	bl	8002548 <HAL_TIM_Base_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d11b      	bne.n	8000c86 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <HAL_InitTick+0xdc>)
 8000c50:	f001 fcd4 	bl	80025fc <HAL_TIM_Base_Start_IT>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d111      	bne.n	8000c86 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c62:	2019      	movs	r0, #25
 8000c64:	f000 f9d0 	bl	8001008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d808      	bhi.n	8000c80 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	2019      	movs	r0, #25
 8000c74:	f000 f9ac 	bl	8000fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_InitTick+0xe4>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e002      	b.n	8000c86 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	200003b0 	.word	0x200003b0
 8000ca0:	40010000 	.word	0x40010000
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f000 fb73 	bl	80013c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cea:	f001 fcf7 	bl	80026dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200003b0 	.word	0x200003b0

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f004 fb30 	bl	800538c <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	200003f8 	.word	0x200003f8
 8000d60:	200041a8 	.word	0x200041a8

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d8e:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da4:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db2:	f7ff ffd7 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f004 faef 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc8d 	bl	80006d8 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dcc:	08005eec 	.word	0x08005eec
  ldr r2, =_sbss
 8000dd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dd4:	200041a4 	.word	0x200041a4

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8d8 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff fed8 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe38 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	200003fc 	.word	0x200003fc

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200003fc 	.word	0x200003fc

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff4c 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe2:	f7ff ff61 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff ffb1 	bl	8000f54 <NVIC_EncodePriority>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff80 	bl	8000f00 <__NVIC_SetPriority>
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff54 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e16b      	b.n	8001318 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 815a 	bne.w	8001312 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	2b02      	cmp	r3, #2
 8001074:	d130      	bne.n	80010d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d017      	beq.n	8001114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80b4 	beq.w	8001312 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b60      	ldr	r3, [pc, #384]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a5f      	ldr	r2, [pc, #380]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a5b      	ldr	r2, [pc, #364]	; (8001334 <HAL_GPIO_Init+0x310>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_GPIO_Init+0x314>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02b      	beq.n	800124a <HAL_GPIO_Init+0x226>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a51      	ldr	r2, [pc, #324]	; (800133c <HAL_GPIO_Init+0x318>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x222>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a50      	ldr	r2, [pc, #320]	; (8001340 <HAL_GPIO_Init+0x31c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x21e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x320>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x21a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4e      	ldr	r2, [pc, #312]	; (8001348 <HAL_GPIO_Init+0x324>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x216>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4d      	ldr	r2, [pc, #308]	; (800134c <HAL_GPIO_Init+0x328>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x212>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4c      	ldr	r2, [pc, #304]	; (8001350 <HAL_GPIO_Init+0x32c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x20e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <HAL_GPIO_Init+0x330>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x20a>
 800122a:	2307      	movs	r3, #7
 800122c:	e00e      	b.n	800124c <HAL_GPIO_Init+0x228>
 800122e:	2308      	movs	r3, #8
 8001230:	e00c      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001232:	2306      	movs	r3, #6
 8001234:	e00a      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001236:	2305      	movs	r3, #5
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123a:	2304      	movs	r3, #4
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x228>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4935      	ldr	r1, [pc, #212]	; (8001334 <HAL_GPIO_Init+0x310>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_GPIO_Init+0x334>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a32      	ldr	r2, [pc, #200]	; (8001358 <HAL_GPIO_Init+0x334>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_GPIO_Init+0x334>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a27      	ldr	r2, [pc, #156]	; (8001358 <HAL_GPIO_Init+0x334>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <HAL_GPIO_Init+0x334>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e2:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_GPIO_Init+0x334>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_GPIO_Init+0x334>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <HAL_GPIO_Init+0x334>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f ae90 	bls.w	8001040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40021400 	.word	0x40021400
 8001350:	40021800 	.word	0x40021800
 8001354:	40021c00 	.word	0x40021c00
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001378:	e003      	b.n	8001382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a0:	887a      	ldrh	r2, [r7, #2]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	041a      	lsls	r2, r3, #16
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	400b      	ands	r3, r1
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8f8 	bl	80005d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e267      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d075      	beq.n	80014fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b04      	cmp	r3, #4
 800141c:	d00c      	beq.n	8001438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141e:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001426:	2b08      	cmp	r3, #8
 8001428:	d112      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142a:	4b82      	ldr	r3, [pc, #520]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001436:	d10b      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d05b      	beq.n	80014fc <HAL_RCC_OscConfig+0x108>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d157      	bne.n	80014fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e242      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x74>
 800145a:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a75      	ldr	r2, [pc, #468]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x98>
 8001472:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6f      	ldr	r2, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6c      	ldr	r2, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 800148c:	4b69      	ldr	r3, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a68      	ldr	r2, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fccc 	bl	8000e48 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fcc8 	bl	8000e48 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e207      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0xc0>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fcb8 	bl	8000e48 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fcb4 	bl	8000e48 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1f3      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0xe8>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d063      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151e:	2b08      	cmp	r3, #8
 8001520:	d11c      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1c7      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4937      	ldr	r1, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	e03a      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x244>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fc6d 	bl	8000e48 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fc69 	bl	8000e48 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1a8      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4925      	ldr	r1, [pc, #148]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
 80015a4:	e015      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_RCC_OscConfig+0x244>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fc4c 	bl	8000e48 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff fc48 	bl	8000e48 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e187      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d036      	beq.n	800164c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d016      	beq.n	8001614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_RCC_OscConfig+0x248>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fc2c 	bl	8000e48 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc28 	bl	8000e48 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e167      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x200>
 8001612:	e01b      	b.n	800164c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_OscConfig+0x248>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fc15 	bl	8000e48 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	e00e      	b.n	8001640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fc11 	bl	8000e48 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d907      	bls.n	8001640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e150      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
 8001634:	40023800 	.word	0x40023800
 8001638:	42470000 	.word	0x42470000
 800163c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ea      	bne.n	8001622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8097 	beq.w	8001788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b7d      	ldr	r3, [pc, #500]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a7c      	ldr	r2, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b77      	ldr	r3, [pc, #476]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001696:	4b74      	ldr	r3, [pc, #464]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a73      	ldr	r2, [pc, #460]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fbd1 	bl	8000e48 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff fbcd 	bl	8000e48 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e10c      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x2ea>
 80016d0:	4b64      	ldr	r3, [pc, #400]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	4a63      	ldr	r2, [pc, #396]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	; 0x70
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x324>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x30c>
 80016e6:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a5e      	ldr	r2, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	4a5b      	ldr	r2, [pc, #364]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	; 0x70
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x324>
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a57      	ldr	r2, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	4b55      	ldr	r3, [pc, #340]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001712:	f023 0304 	bic.w	r3, r3, #4
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fb92 	bl	8000e48 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fb8e 	bl	8000e48 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0cb      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0ee      	beq.n	8001728 <HAL_RCC_OscConfig+0x334>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff fb7c 	bl	8000e48 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001752:	e00a      	b.n	800176a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fb78 	bl	8000e48 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0b5      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ee      	bne.n	8001754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	4a38      	ldr	r2, [pc, #224]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a1 	beq.w	80018d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b08      	cmp	r3, #8
 800179c:	d05c      	beq.n	8001858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d141      	bne.n	800182a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x478>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb4c 	bl	8000e48 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff fb48 	bl	8000e48 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e087      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	3b01      	subs	r3, #1
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	491b      	ldr	r1, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x478>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fb21 	bl	8000e48 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fb1d 	bl	8000e48 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e05c      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x416>
 8001828:	e054      	b.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x478>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fb0a 	bl	8000e48 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fb06 	bl	8000e48 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e045      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x444>
 8001856:	e03d      	b.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d107      	bne.n	8001870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e038      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000
 800186c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x4ec>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d028      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d121      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d11a      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a0:	4013      	ands	r3, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d111      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	3b01      	subs	r3, #1
 80018ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0cc      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d90c      	bls.n	8001920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0b8      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	494d      	ldr	r1, [pc, #308]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d044      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e06f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e067      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4934      	ldr	r1, [pc, #208]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff fa38 	bl	8000e48 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff fa34 	bl	8000e48 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e04f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d20c      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e032      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4916      	ldr	r1, [pc, #88]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6a:	f000 f821 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	5ccb      	ldrb	r3, [r1, r3]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f898 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08005e30 	.word	0x08005e30
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab4:	b094      	sub	sp, #80	; 0x50
 8001ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
 8001abc:	2300      	movs	r3, #0
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac8:	4b79      	ldr	r3, [pc, #484]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d00d      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	f200 80e1 	bhi.w	8001c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x3a>
 8001ae2:	e0db      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ae8:	e0db      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aee:	e0d8      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af0:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afa:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d063      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	099b      	lsrs	r3, r3, #6
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b22:	4622      	mov	r2, r4
 8001b24:	462b      	mov	r3, r5
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	0159      	lsls	r1, r3, #5
 8001b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b34:	0150      	lsls	r0, r2, #5
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	1a51      	subs	r1, r2, r1
 8001b3e:	6139      	str	r1, [r7, #16]
 8001b40:	4629      	mov	r1, r5
 8001b42:	eb63 0301 	sbc.w	r3, r3, r1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b54:	4659      	mov	r1, fp
 8001b56:	018b      	lsls	r3, r1, #6
 8001b58:	4651      	mov	r1, sl
 8001b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b5e:	4651      	mov	r1, sl
 8001b60:	018a      	lsls	r2, r1, #6
 8001b62:	4651      	mov	r1, sl
 8001b64:	ebb2 0801 	subs.w	r8, r2, r1
 8001b68:	4659      	mov	r1, fp
 8001b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b82:	4690      	mov	r8, r2
 8001b84:	4699      	mov	r9, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	eb18 0303 	adds.w	r3, r8, r3
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	462b      	mov	r3, r5
 8001b90:	eb49 0303 	adc.w	r3, r9, r3
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	024b      	lsls	r3, r1, #9
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bac:	4621      	mov	r1, r4
 8001bae:	024a      	lsls	r2, r1, #9
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bc0:	f7fe fb56 	bl	8000270 <__aeabi_uldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bcc:	e058      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bce:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	099b      	lsrs	r3, r3, #6
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4611      	mov	r1, r2
 8001bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001be8:	4642      	mov	r2, r8
 8001bea:	464b      	mov	r3, r9
 8001bec:	f04f 0000 	mov.w	r0, #0
 8001bf0:	f04f 0100 	mov.w	r1, #0
 8001bf4:	0159      	lsls	r1, r3, #5
 8001bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfa:	0150      	lsls	r0, r2, #5
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4641      	mov	r1, r8
 8001c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c06:	4649      	mov	r1, r9
 8001c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c20:	ebb2 040a 	subs.w	r4, r2, sl
 8001c24:	eb63 050b 	sbc.w	r5, r3, fp
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	00eb      	lsls	r3, r5, #3
 8001c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c36:	00e2      	lsls	r2, r4, #3
 8001c38:	4614      	mov	r4, r2
 8001c3a:	461d      	mov	r5, r3
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	18e3      	adds	r3, r4, r3
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	464b      	mov	r3, r9
 8001c44:	eb45 0303 	adc.w	r3, r5, r3
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c56:	4629      	mov	r1, r5
 8001c58:	028b      	lsls	r3, r1, #10
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c60:	4621      	mov	r1, r4
 8001c62:	028a      	lsls	r2, r1, #10
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	61fa      	str	r2, [r7, #28]
 8001c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c74:	f7fe fafc 	bl	8000270 <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3750      	adds	r7, #80	; 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08005e40 	.word	0x08005e40

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffdc 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08005e40 	.word	0x08005e40

08001d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	220f      	movs	r2, #15
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_RCC_GetClockConfig+0x60>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0207 	and.w	r2, r3, #7
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	601a      	str	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d035      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001db6:	f7ff f847 	bl	8000e48 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dbe:	f7ff f843 	bl	8000e48 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0b0      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dd0:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	019a      	lsls	r2, r3, #6
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	071b      	lsls	r3, r3, #28
 8001de8:	4955      	ldr	r1, [pc, #340]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001df0:	4b52      	ldr	r3, [pc, #328]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001df6:	f7ff f827 	bl	8000e48 <HAL_GetTick>
 8001dfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dfe:	f7ff f823 	bl	8000e48 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e090      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8083 	beq.w	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a43      	ldr	r2, [pc, #268]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e46:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a3e      	ldr	r2, [pc, #248]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e52:	f7fe fff9 	bl	8000e48 <HAL_GetTick>
 8001e56:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7fe fff5 	bl	8000e48 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e062      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e80:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02f      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d028      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001eac:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d114      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe ffc3 	bl	8000e48 <HAL_GetTick>
 8001ec2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7fe ffbf 	bl	8000e48 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e02a      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ee      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ef4:	d10d      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0a:	490d      	ldr	r1, [pc, #52]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
 8001f10:	e005      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f1c:	6093      	str	r3, [r2, #8]
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	4905      	ldr	r1, [pc, #20]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	42470068 	.word	0x42470068
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000
 8001f48:	42470e40 	.word	0x42470e40

08001f4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e066      	b.n	8002030 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7f5b      	ldrb	r3, [r3, #29]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fdb2 	bl	8000adc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	22ca      	movs	r2, #202	; 0xca
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2253      	movs	r2, #83	; 0x53
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa45 	bl	800241e <RTC_EnterInitMode>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12c      	bne.n	8001ff8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fb0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6899      	ldr	r1, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68d2      	ldr	r2, [r2, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6919      	ldr	r1, [r3, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fa4c 	bl	800248c <RTC_ExitInitMode>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d113      	bne.n	8002026 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	7f1b      	ldrb	r3, [r3, #28]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_RTC_SetTime+0x1c>
 8002050:	2302      	movs	r3, #2
 8002052:	e087      	b.n	8002164 <HAL_RTC_SetTime+0x12c>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2202      	movs	r2, #2
 800205e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d126      	bne.n	80020b4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fa29 	bl	80024d6 <RTC_ByteToBcd2>
 8002084:	4603      	mov	r3, r0
 8002086:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fa22 	bl	80024d6 <RTC_ByteToBcd2>
 8002092:	4603      	mov	r3, r0
 8002094:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002096:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	789b      	ldrb	r3, [r3, #2]
 800209c:	4618      	mov	r0, r3
 800209e:	f000 fa1a 	bl	80024d6 <RTC_ByteToBcd2>
 80020a2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80020a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	78db      	ldrb	r3, [r3, #3]
 80020ac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e018      	b.n	80020e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2200      	movs	r2, #0
 80020c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	785b      	ldrb	r3, [r3, #1]
 80020d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020d4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80020da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	78db      	ldrb	r3, [r3, #3]
 80020e0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	22ca      	movs	r2, #202	; 0xca
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2253      	movs	r2, #83	; 0x53
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f991 	bl	800241e <RTC_EnterInitMode>
 80020fc:	4603      	mov	r3, r0
 80020fe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d120      	bne.n	8002148 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002110:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002114:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002124:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	431a      	orrs	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f9a4 	bl	800248c <RTC_ExitInitMode>
 8002144:	4603      	mov	r3, r0
 8002146:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	771a      	strb	r2, [r3, #28]

  return status;
 8002162:	7cfb      	ldrb	r3, [r7, #19]
}
 8002164:	4618      	mov	r0, r3
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd90      	pop	{r4, r7, pc}

0800216c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800219e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80021a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	0d9b      	lsrs	r3, r3, #22
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d11a      	bne.n	800221e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f98f 	bl	8002510 <RTC_Bcd2ToByte>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f986 	bl	8002510 <RTC_Bcd2ToByte>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	789b      	ldrb	r3, [r3, #2]
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f97d 	bl	8002510 <RTC_Bcd2ToByte>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	7f1b      	ldrb	r3, [r3, #28]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_RTC_SetDate+0x1c>
 8002240:	2302      	movs	r3, #2
 8002242:	e071      	b.n	8002328 <HAL_RTC_SetDate+0x100>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2202      	movs	r2, #2
 800224e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10e      	bne.n	8002274 <HAL_RTC_SetDate+0x4c>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	f023 0310 	bic.w	r3, r3, #16
 800226a:	b2db      	uxtb	r3, r3
 800226c:	330a      	adds	r3, #10
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11c      	bne.n	80022b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	78db      	ldrb	r3, [r3, #3]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f929 	bl	80024d6 <RTC_ByteToBcd2>
 8002284:	4603      	mov	r3, r0
 8002286:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	785b      	ldrb	r3, [r3, #1]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f922 	bl	80024d6 <RTC_ByteToBcd2>
 8002292:	4603      	mov	r3, r0
 8002294:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002296:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	789b      	ldrb	r3, [r3, #2]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f91a 	bl	80024d6 <RTC_ByteToBcd2>
 80022a2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80022a4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e00e      	b.n	80022d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	78db      	ldrb	r3, [r3, #3]
 80022b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80022c0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80022c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	22ca      	movs	r2, #202	; 0xca
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2253      	movs	r2, #83	; 0x53
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f89b 	bl	800241e <RTC_EnterInitMode>
 80022e8:	4603      	mov	r3, r0
 80022ea:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002300:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f8c2 	bl	800248c <RTC_ExitInitMode>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	22ff      	movs	r2, #255	; 0xff
 800231e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	771a      	strb	r2, [r3, #28]

  return status;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
}
 8002328:	4618      	mov	r0, r3
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}

08002330 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800234a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800234e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	b2da      	uxtb	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	0b5b      	lsrs	r3, r3, #13
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	b2da      	uxtb	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11a      	bne.n	80023c4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	78db      	ldrb	r3, [r3, #3]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f8bc 	bl	8002510 <RTC_Bcd2ToByte>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	785b      	ldrb	r3, [r3, #1]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f8b3 	bl	8002510 <RTC_Bcd2ToByte>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	789b      	ldrb	r3, [r3, #2]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f8aa 	bl	8002510 <RTC_Bcd2ToByte>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023e8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ea:	f7fe fd2d 	bl	8000e48 <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80023f0:	e009      	b.n	8002406 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023f2:	f7fe fd29 	bl	8000e48 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002400:	d901      	bls.n	8002406 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e007      	b.n	8002416 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d122      	bne.n	8002482 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800244a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800244c:	f7fe fcfc 	bl	8000e48 <HAL_GetTick>
 8002450:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002452:	e00c      	b.n	800246e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002454:	f7fe fcf8 	bl	8000e48 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002462:	d904      	bls.n	800246e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2204      	movs	r2, #4
 8002468:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <RTC_EnterInitMode+0x64>
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d1e8      	bne.n	8002454 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ff89 	bl	80023ce <HAL_RTC_WaitForSynchro>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	4603      	mov	r3, r0
 80024de:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80024e4:	e005      	b.n	80024f2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	3b0a      	subs	r3, #10
 80024f0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	d8f6      	bhi.n	80024e6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	4313      	orrs	r3, r2
 8002502:	b2db      	uxtb	r3, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4413      	add	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	b2da      	uxtb	r2, r3
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	4413      	add	r3, r2
 800253a:	b2db      	uxtb	r3, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e041      	b.n	80025de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f839 	bl	80025e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f000 f9d8 	bl	800293c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	d001      	beq.n	8002614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e04e      	b.n	80026b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d022      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263e:	d01d      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d018      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_TIM_Base_Start_IT+0xd0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_TIM_Base_Start_IT+0x80>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a18      	ldr	r2, [pc, #96]	; (80026d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d111      	bne.n	80026a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b06      	cmp	r3, #6
 800268c:	d010      	beq.n	80026b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269e:	e007      	b.n	80026b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800
 80026cc:	40000c00 	.word	0x40000c00
 80026d0:	40010400 	.word	0x40010400
 80026d4:	40014000 	.word	0x40014000
 80026d8:	40001800 	.word	0x40001800

080026dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0202 	mvn.w	r2, #2
 8002708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8ee 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f8e0 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f8f1 	bl	8002914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b04      	cmp	r3, #4
 8002744:	d122      	bne.n	800278c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0204 	mvn.w	r2, #4
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8c4 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8b6 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8c7 	bl	8002914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b08      	cmp	r3, #8
 8002798:	d122      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d11b      	bne.n	80027e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0208 	mvn.w	r2, #8
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2204      	movs	r2, #4
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f89a 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f88c 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f89d 	bl	8002914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0210 	mvn.w	r2, #16
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2208      	movs	r2, #8
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f870 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f862 	bl	80028ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f873 	bl	8002914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0201 	mvn.w	r2, #1
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe f8fa 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b80      	cmp	r3, #128	; 0x80
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f902 	bl	8002a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b40      	cmp	r3, #64	; 0x40
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f838 	bl	8002928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0220 	mvn.w	r2, #32
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f8cc 	bl	8002a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a40      	ldr	r2, [pc, #256]	; (8002a50 <TIM_Base_SetConfig+0x114>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295a:	d00f      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3d      	ldr	r2, [pc, #244]	; (8002a54 <TIM_Base_SetConfig+0x118>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00b      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3c      	ldr	r2, [pc, #240]	; (8002a58 <TIM_Base_SetConfig+0x11c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <TIM_Base_SetConfig+0x120>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3a      	ldr	r2, [pc, #232]	; (8002a60 <TIM_Base_SetConfig+0x124>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <TIM_Base_SetConfig+0x114>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02b      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d027      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <TIM_Base_SetConfig+0x118>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d023      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2b      	ldr	r2, [pc, #172]	; (8002a58 <TIM_Base_SetConfig+0x11c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <TIM_Base_SetConfig+0x120>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01b      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a29      	ldr	r2, [pc, #164]	; (8002a60 <TIM_Base_SetConfig+0x124>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d017      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <TIM_Base_SetConfig+0x128>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <TIM_Base_SetConfig+0x12c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00f      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <TIM_Base_SetConfig+0x130>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00b      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <TIM_Base_SetConfig+0x134>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <TIM_Base_SetConfig+0x138>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d003      	beq.n	80029ee <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <TIM_Base_SetConfig+0x13c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <TIM_Base_SetConfig+0x114>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0xf8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <TIM_Base_SetConfig+0x124>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	40010400 	.word	0x40010400
 8002a64:	40014000 	.word	0x40014000
 8002a68:	40014400 	.word	0x40014400
 8002a6c:	40014800 	.word	0x40014800
 8002a70:	40001800 	.word	0x40001800
 8002a74:	40001c00 	.word	0x40001c00
 8002a78:	40002000 	.word	0x40002000

08002a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e03f      	b.n	8002b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe f830 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f929 	bl	8002d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b08a      	sub	sp, #40	; 0x28
 8002b42:	af02      	add	r7, sp, #8
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d17c      	bne.n	8002c58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UART_Transmit+0x2c>
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e075      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Transmit+0x3e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e06e      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b92:	f7fe f959 	bl	8000e48 <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	d108      	bne.n	8002bc0 <HAL_UART_Transmit+0x82>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d104      	bne.n	8002bc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	e003      	b.n	8002bc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bd0:	e02a      	b.n	8002c28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f840 	bl	8002c62 <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3302      	adds	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e007      	b.n	8002c1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	3301      	adds	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1cf      	bne.n	8002bd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f810 	bl	8002c62 <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e006      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b090      	sub	sp, #64	; 0x40
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c72:	e050      	b.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7a:	d04c      	beq.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c82:	f7fe f8e1 	bl	8000e48 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d241      	bcs.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb2:	637a      	str	r2, [r7, #52]	; 0x34
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e5      	bne.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3314      	adds	r3, #20
 8002ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ce6:	623a      	str	r2, [r7, #32]
 8002ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	69f9      	ldr	r1, [r7, #28]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e5      	bne.n	8002cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e00f      	b.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d09f      	beq.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3740      	adds	r7, #64	; 0x40
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d44:	b0c0      	sub	sp, #256	; 0x100
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	68d9      	ldr	r1, [r3, #12]
 8002d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	ea40 0301 	orr.w	r3, r0, r1
 8002d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d98:	f021 010c 	bic.w	r1, r1, #12
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002da6:	430b      	orrs	r3, r1
 8002da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dba:	6999      	ldr	r1, [r3, #24]
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	ea40 0301 	orr.w	r3, r0, r1
 8002dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b8f      	ldr	r3, [pc, #572]	; (800300c <UART_SetConfig+0x2cc>)
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d005      	beq.n	8002de0 <UART_SetConfig+0xa0>
 8002dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b8d      	ldr	r3, [pc, #564]	; (8003010 <UART_SetConfig+0x2d0>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d104      	bne.n	8002dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002de0:	f7fe ff8c 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8002de4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002de8:	e003      	b.n	8002df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dea:	f7fe ff73 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002dee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	f040 810c 	bne.w	8003018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e12:	4622      	mov	r2, r4
 8002e14:	462b      	mov	r3, r5
 8002e16:	1891      	adds	r1, r2, r2
 8002e18:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e1a:	415b      	adcs	r3, r3
 8002e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e22:	4621      	mov	r1, r4
 8002e24:	eb12 0801 	adds.w	r8, r2, r1
 8002e28:	4629      	mov	r1, r5
 8002e2a:	eb43 0901 	adc.w	r9, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e42:	4690      	mov	r8, r2
 8002e44:	4699      	mov	r9, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb18 0303 	adds.w	r3, r8, r3
 8002e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e50:	462b      	mov	r3, r5
 8002e52:	eb49 0303 	adc.w	r3, r9, r3
 8002e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e6e:	460b      	mov	r3, r1
 8002e70:	18db      	adds	r3, r3, r3
 8002e72:	653b      	str	r3, [r7, #80]	; 0x50
 8002e74:	4613      	mov	r3, r2
 8002e76:	eb42 0303 	adc.w	r3, r2, r3
 8002e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e84:	f7fd f9f4 	bl	8000270 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <UART_SetConfig+0x2d4>)
 8002e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	011c      	lsls	r4, r3, #4
 8002e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	1891      	adds	r1, r2, r2
 8002eae:	64b9      	str	r1, [r7, #72]	; 0x48
 8002eb0:	415b      	adcs	r3, r3
 8002eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002eb8:	4641      	mov	r1, r8
 8002eba:	eb12 0a01 	adds.w	sl, r2, r1
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ed8:	4692      	mov	sl, r2
 8002eda:	469b      	mov	fp, r3
 8002edc:	4643      	mov	r3, r8
 8002ede:	eb1a 0303 	adds.w	r3, sl, r3
 8002ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8002eec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002efc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f04:	460b      	mov	r3, r1
 8002f06:	18db      	adds	r3, r3, r3
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	eb42 0303 	adc.w	r3, r2, r3
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
 8002f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f1a:	f7fd f9a9 	bl	8000270 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <UART_SetConfig+0x2d4>)
 8002f26:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2264      	movs	r2, #100	; 0x64
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	1acb      	subs	r3, r1, r3
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f3a:	4b36      	ldr	r3, [pc, #216]	; (8003014 <UART_SetConfig+0x2d4>)
 8002f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f48:	441c      	add	r4, r3
 8002f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	1891      	adds	r1, r2, r2
 8002f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f64:	415b      	adcs	r3, r3
 8002f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	1851      	adds	r1, r2, r1
 8002f70:	6339      	str	r1, [r7, #48]	; 0x30
 8002f72:	4649      	mov	r1, r9
 8002f74:	414b      	adcs	r3, r1
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f84:	4659      	mov	r1, fp
 8002f86:	00cb      	lsls	r3, r1, #3
 8002f88:	4651      	mov	r1, sl
 8002f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8e:	4651      	mov	r1, sl
 8002f90:	00ca      	lsls	r2, r1, #3
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	4642      	mov	r2, r8
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fa0:	464b      	mov	r3, r9
 8002fa2:	460a      	mov	r2, r1
 8002fa4:	eb42 0303 	adc.w	r3, r2, r3
 8002fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	18db      	adds	r3, r3, r3
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fd6:	f7fd f94b 	bl	8000270 <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <UART_SetConfig+0x2d4>)
 8002fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	2164      	movs	r1, #100	; 0x64
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	3332      	adds	r3, #50	; 0x32
 8002ff2:	4a08      	ldr	r2, [pc, #32]	; (8003014 <UART_SetConfig+0x2d4>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	f003 0207 	and.w	r2, r3, #7
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4422      	add	r2, r4
 8003006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003008:	e105      	b.n	8003216 <UART_SetConfig+0x4d6>
 800300a:	bf00      	nop
 800300c:	40011000 	.word	0x40011000
 8003010:	40011400 	.word	0x40011400
 8003014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003022:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800302a:	4642      	mov	r2, r8
 800302c:	464b      	mov	r3, r9
 800302e:	1891      	adds	r1, r2, r2
 8003030:	6239      	str	r1, [r7, #32]
 8003032:	415b      	adcs	r3, r3
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
 8003036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800303a:	4641      	mov	r1, r8
 800303c:	1854      	adds	r4, r2, r1
 800303e:	4649      	mov	r1, r9
 8003040:	eb43 0501 	adc.w	r5, r3, r1
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	00eb      	lsls	r3, r5, #3
 800304e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003052:	00e2      	lsls	r2, r4, #3
 8003054:	4614      	mov	r4, r2
 8003056:	461d      	mov	r5, r3
 8003058:	4643      	mov	r3, r8
 800305a:	18e3      	adds	r3, r4, r3
 800305c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003060:	464b      	mov	r3, r9
 8003062:	eb45 0303 	adc.w	r3, r5, r3
 8003066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003086:	4629      	mov	r1, r5
 8003088:	008b      	lsls	r3, r1, #2
 800308a:	4621      	mov	r1, r4
 800308c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003090:	4621      	mov	r1, r4
 8003092:	008a      	lsls	r2, r1, #2
 8003094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003098:	f7fd f8ea 	bl	8000270 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4b60      	ldr	r3, [pc, #384]	; (8003224 <UART_SetConfig+0x4e4>)
 80030a2:	fba3 2302 	umull	r2, r3, r3, r2
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	011c      	lsls	r4, r3, #4
 80030aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030bc:	4642      	mov	r2, r8
 80030be:	464b      	mov	r3, r9
 80030c0:	1891      	adds	r1, r2, r2
 80030c2:	61b9      	str	r1, [r7, #24]
 80030c4:	415b      	adcs	r3, r3
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030cc:	4641      	mov	r1, r8
 80030ce:	1851      	adds	r1, r2, r1
 80030d0:	6139      	str	r1, [r7, #16]
 80030d2:	4649      	mov	r1, r9
 80030d4:	414b      	adcs	r3, r1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030e4:	4659      	mov	r1, fp
 80030e6:	00cb      	lsls	r3, r1, #3
 80030e8:	4651      	mov	r1, sl
 80030ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ee:	4651      	mov	r1, sl
 80030f0:	00ca      	lsls	r2, r1, #3
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	4642      	mov	r2, r8
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003100:	464b      	mov	r3, r9
 8003102:	460a      	mov	r2, r1
 8003104:	eb42 0303 	adc.w	r3, r2, r3
 8003108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	67bb      	str	r3, [r7, #120]	; 0x78
 8003116:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003124:	4649      	mov	r1, r9
 8003126:	008b      	lsls	r3, r1, #2
 8003128:	4641      	mov	r1, r8
 800312a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800312e:	4641      	mov	r1, r8
 8003130:	008a      	lsls	r2, r1, #2
 8003132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003136:	f7fd f89b 	bl	8000270 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <UART_SetConfig+0x4e4>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	2164      	movs	r1, #100	; 0x64
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	3332      	adds	r3, #50	; 0x32
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <UART_SetConfig+0x4e4>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800315e:	441c      	add	r4, r3
 8003160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003164:	2200      	movs	r2, #0
 8003166:	673b      	str	r3, [r7, #112]	; 0x70
 8003168:	677a      	str	r2, [r7, #116]	; 0x74
 800316a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800316e:	4642      	mov	r2, r8
 8003170:	464b      	mov	r3, r9
 8003172:	1891      	adds	r1, r2, r2
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	415b      	adcs	r3, r3
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800317e:	4641      	mov	r1, r8
 8003180:	1851      	adds	r1, r2, r1
 8003182:	6039      	str	r1, [r7, #0]
 8003184:	4649      	mov	r1, r9
 8003186:	414b      	adcs	r3, r1
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003196:	4659      	mov	r1, fp
 8003198:	00cb      	lsls	r3, r1, #3
 800319a:	4651      	mov	r1, sl
 800319c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a0:	4651      	mov	r1, sl
 80031a2:	00ca      	lsls	r2, r1, #3
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	4642      	mov	r2, r8
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80031b0:	464b      	mov	r3, r9
 80031b2:	460a      	mov	r2, r1
 80031b4:	eb42 0303 	adc.w	r3, r2, r3
 80031b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	663b      	str	r3, [r7, #96]	; 0x60
 80031c4:	667a      	str	r2, [r7, #100]	; 0x64
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031d2:	4649      	mov	r1, r9
 80031d4:	008b      	lsls	r3, r1, #2
 80031d6:	4641      	mov	r1, r8
 80031d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031dc:	4641      	mov	r1, r8
 80031de:	008a      	lsls	r2, r1, #2
 80031e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031e4:	f7fd f844 	bl	8000270 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <UART_SetConfig+0x4e4>)
 80031ee:	fba3 1302 	umull	r1, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2164      	movs	r1, #100	; 0x64
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	3332      	adds	r3, #50	; 0x32
 8003200:	4a08      	ldr	r2, [pc, #32]	; (8003224 <UART_SetConfig+0x4e4>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 020f 	and.w	r2, r3, #15
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4422      	add	r2, r4
 8003214:	609a      	str	r2, [r3, #8]
}
 8003216:	bf00      	nop
 8003218:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800321c:	46bd      	mov	sp, r7
 800321e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003222:	bf00      	nop
 8003224:	51eb851f 	.word	0x51eb851f

08003228 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800323a:	2b84      	cmp	r3, #132	; 0x84
 800323c:	d005      	beq.n	800324a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800323e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	3303      	adds	r3, #3
 8003248:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800325c:	f000 fe9c 	bl	8003f98 <vTaskStartScheduler>
  
  return osOK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	bd80      	pop	{r7, pc}

08003266 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003266:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003268:	b089      	sub	sp, #36	; 0x24
 800326a:	af04      	add	r7, sp, #16
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d020      	beq.n	80032ba <osThreadCreate+0x54>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01c      	beq.n	80032ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685c      	ldr	r4, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681d      	ldr	r5, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691e      	ldr	r6, [r3, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ffc8 	bl	8003228 <makeFreeRtosPriority>
 8003298:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032a2:	9202      	str	r2, [sp, #8]
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	9100      	str	r1, [sp, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	4632      	mov	r2, r6
 80032ac:	4629      	mov	r1, r5
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 fc16 	bl	8003ae0 <xTaskCreateStatic>
 80032b4:	4603      	mov	r3, r0
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e01c      	b.n	80032f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685c      	ldr	r4, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032c6:	b29e      	uxth	r6, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ffaa 	bl	8003228 <makeFreeRtosPriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f107 030c 	add.w	r3, r7, #12
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	9200      	str	r2, [sp, #0]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	4632      	mov	r2, r6
 80032e2:	4629      	mov	r1, r5
 80032e4:	4620      	mov	r0, r4
 80032e6:	f000 fc58 	bl	8003b9a <xTaskCreate>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d001      	beq.n	80032f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032f4:	68fb      	ldr	r3, [r7, #12]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <osDelay+0x16>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	e000      	b.n	8003316 <osDelay+0x18>
 8003314:	2301      	movs	r3, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fe0a 	bl	8003f30 <vTaskDelay>
  
  return osOK;
 800331c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f103 0208 	add.w	r2, r3, #8
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800333e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f103 0208 	add.w	r2, r3, #8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f103 0208 	add.w	r2, r3, #8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033de:	d103      	bne.n	80033e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e00c      	b.n	8003402 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3308      	adds	r3, #8
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	e002      	b.n	80033f6 <vListInsert+0x2e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d2f6      	bcs.n	80033f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6892      	ldr	r2, [r2, #8]
 8003450:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6852      	ldr	r2, [r2, #4]
 800345a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d103      	bne.n	800346e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034b6:	bf00      	nop
 80034b8:	e7fe      	b.n	80034b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034ba:	f001 fc5b 	bl	8004d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	441a      	add	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	3b01      	subs	r3, #1
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	441a      	add	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	22ff      	movs	r2, #255	; 0xff
 8003506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d114      	bne.n	800353a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01a      	beq.n	800354e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3310      	adds	r3, #16
 800351c:	4618      	mov	r0, r3
 800351e:	f000 ff9d 	bl	800445c <xTaskRemoveFromEventList>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d012      	beq.n	800354e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <xQueueGenericReset+0xcc>)
 800352a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	e009      	b.n	800354e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3310      	adds	r3, #16
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fef1 	bl	8003326 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3324      	adds	r3, #36	; 0x24
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff feec 	bl	8003326 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800354e:	f001 fc41 	bl	8004dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003552:	2301      	movs	r3, #1
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	613b      	str	r3, [r7, #16]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	3348      	adds	r3, #72	; 0x48
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fd0d 	bl	8004fb8 <pvPortMalloc>
 800359e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d011      	beq.n	80035ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3348      	adds	r3, #72	; 0x48
 80035ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035b8:	79fa      	ldrb	r2, [r7, #7]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	4613      	mov	r3, r2
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f805 	bl	80035d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035ca:	69bb      	ldr	r3, [r7, #24]
	}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003602:	2101      	movs	r1, #1
 8003604:	69b8      	ldr	r0, [r7, #24]
 8003606:	f7ff ff43 	bl	8003490 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b08e      	sub	sp, #56	; 0x38
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	623b      	str	r3, [r7, #32]
}
 8003638:	bf00      	nop
 800363a:	e7fe      	b.n	800363a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <xQueueGiveFromISR+0x48>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	61fb      	str	r3, [r7, #28]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <xQueueGiveFromISR+0x58>
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <xQueueGiveFromISR+0x5c>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <xQueueGiveFromISR+0x5e>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <xQueueGiveFromISR+0x78>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	61bb      	str	r3, [r7, #24]
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800368a:	f001 fc55 	bl	8004f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800368e:	f3ef 8211 	mrs	r2, BASEPRI
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	617a      	str	r2, [r7, #20]
 80036a4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d22b      	bcs.n	8003712 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d4:	d112      	bne.n	80036fc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	3324      	adds	r3, #36	; 0x24
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 feba 	bl	800445c <xTaskRemoveFromEventList>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00e      	beq.n	800370c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00b      	beq.n	800370c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e007      	b.n	800370c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003700:	3301      	adds	r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	b25a      	sxtb	r2, r3
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800370c:	2301      	movs	r3, #1
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
 8003710:	e001      	b.n	8003716 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003712:	2300      	movs	r3, #0
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003720:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003724:	4618      	mov	r0, r3
 8003726:	3738      	adds	r7, #56	; 0x38
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08e      	sub	sp, #56	; 0x38
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003736:	2300      	movs	r3, #0
 8003738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800373e:	2300      	movs	r3, #0
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	623b      	str	r3, [r7, #32]
}
 800375a:	bf00      	nop
 800375c:	e7fe      	b.n	800375c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	61fb      	str	r3, [r7, #28]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800377c:	f001 f82e 	bl	80047dc <xTaskGetSchedulerState>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <xQueueSemaphoreTake+0x60>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <xQueueSemaphoreTake+0x64>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <xQueueSemaphoreTake+0x66>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	61bb      	str	r3, [r7, #24]
}
 80037a8:	bf00      	nop
 80037aa:	e7fe      	b.n	80037aa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ac:	f001 fae2 	bl	8004d74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d024      	beq.n	8003806 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80037cc:	f001 f928 	bl	8004a20 <pvTaskIncrementMutexHeldCount>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00f      	beq.n	80037fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	3310      	adds	r3, #16
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fe3a 	bl	800445c <xTaskRemoveFromEventList>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037ee:	4b54      	ldr	r3, [pc, #336]	; (8003940 <xQueueSemaphoreTake+0x214>)
 80037f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037fe:	f001 fae9 	bl	8004dd4 <vPortExitCritical>
				return pdPASS;
 8003802:	2301      	movs	r3, #1
 8003804:	e097      	b.n	8003936 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d111      	bne.n	8003830 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	617b      	str	r3, [r7, #20]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003828:	f001 fad4 	bl	8004dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800382c:	2300      	movs	r3, #0
 800382e:	e082      	b.n	8003936 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fe70 	bl	8004520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003840:	2301      	movs	r3, #1
 8003842:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003844:	f001 fac6 	bl	8004dd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003848:	f000 fc10 	bl	800406c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800384c:	f001 fa92 	bl	8004d74 <vPortEnterCritical>
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003856:	b25b      	sxtb	r3, r3
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800385c:	d103      	bne.n	8003866 <xQueueSemaphoreTake+0x13a>
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800386c:	b25b      	sxtb	r3, r3
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003872:	d103      	bne.n	800387c <xQueueSemaphoreTake+0x150>
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800387c:	f001 faaa 	bl	8004dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003880:	463a      	mov	r2, r7
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fe5f 	bl	800454c <xTaskCheckForTimeOut>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d132      	bne.n	80038fa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003896:	f000 f8e2 	bl	8003a5e <prvIsQueueEmpty>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d026      	beq.n	80038ee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80038a8:	f001 fa64 	bl	8004d74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 ffb1 	bl	8004818 <xTaskPriorityInherit>
 80038b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80038b8:	f001 fa8c 	bl	8004dd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	3324      	adds	r3, #36	; 0x24
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fda5 	bl	8004414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038cc:	f000 f875 	bl	80039ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038d0:	f000 fbda 	bl	8004088 <xTaskResumeAll>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f47f af68 	bne.w	80037ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <xQueueSemaphoreTake+0x214>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	e75e      	b.n	80037ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80038ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038f0:	f000 f863 	bl	80039ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038f4:	f000 fbc8 	bl	8004088 <xTaskResumeAll>
 80038f8:	e758      	b.n	80037ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80038fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038fc:	f000 f85d 	bl	80039ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003900:	f000 fbc2 	bl	8004088 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003906:	f000 f8aa 	bl	8003a5e <prvIsQueueEmpty>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	f43f af4d 	beq.w	80037ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00d      	beq.n	8003934 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003918:	f001 fa2c 	bl	8004d74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800391c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800391e:	f000 f834 	bl	800398a <prvGetDisinheritPriorityAfterTimeout>
 8003922:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392a:	4618      	mov	r0, r3
 800392c:	f000 ffea 	bl	8004904 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003930:	f001 fa50 	bl	8004dd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003934:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003936:	4618      	mov	r0, r3
 8003938:	3738      	adds	r7, #56	; 0x38
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <vQueueDelete+0x28>
	__asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60bb      	str	r3, [r7, #8]
}
 8003968:	bf00      	nop
 800396a:	e7fe      	b.n	800396a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f88d 	bl	8003a8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f001 fbe7 	bl	8005150 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1c3 0307 	rsb	r3, r3, #7
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e001      	b.n	80039ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80039ac:	68fb      	ldr	r3, [r7, #12]
	}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039c2:	f001 f9d7 	bl	8004d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039ce:	e011      	b.n	80039f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d012      	beq.n	80039fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fd3d 	bl	800445c <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039e8:	f000 fe12 	bl	8004610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dce9      	bgt.n	80039d0 <prvUnlockQueue+0x16>
 80039fc:	e000      	b.n	8003a00 <prvUnlockQueue+0x46>
					break;
 80039fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	22ff      	movs	r2, #255	; 0xff
 8003a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a08:	f001 f9e4 	bl	8004dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a0c:	f001 f9b2 	bl	8004d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a18:	e011      	b.n	8003a3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3310      	adds	r3, #16
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fd18 	bl	800445c <xTaskRemoveFromEventList>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a32:	f000 fded 	bl	8004610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a36:	7bbb      	ldrb	r3, [r7, #14]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dce9      	bgt.n	8003a1a <prvUnlockQueue+0x60>
 8003a46:	e000      	b.n	8003a4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	22ff      	movs	r2, #255	; 0xff
 8003a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a52:	f001 f9bf 	bl	8004dd4 <vPortExitCritical>
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a66:	f001 f985 	bl	8004d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e001      	b.n	8003a7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a7c:	f001 f9aa 	bl	8004dd4 <vPortExitCritical>

	return xReturn;
 8003a80:	68fb      	ldr	r3, [r7, #12]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e016      	b.n	8003ac8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003a9a:	4a10      	ldr	r2, [pc, #64]	; (8003adc <vQueueUnregisterQueue+0x50>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d10b      	bne.n	8003ac2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003aaa:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <vQueueUnregisterQueue+0x50>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2100      	movs	r1, #0
 8003ab0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003ab4:	4a09      	ldr	r2, [pc, #36]	; (8003adc <vQueueUnregisterQueue+0x50>)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
				break;
 8003ac0:	e006      	b.n	8003ad0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b07      	cmp	r3, #7
 8003acc:	d9e5      	bls.n	8003a9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003ace:	bf00      	nop
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000400 	.word	0x20000400

08003ae0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	623b      	str	r3, [r7, #32]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	61fb      	str	r3, [r7, #28]
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b26:	23b4      	movs	r3, #180	; 0xb4
 8003b28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2bb4      	cmp	r3, #180	; 0xb4
 8003b2e:	d00a      	beq.n	8003b46 <xTaskCreateStatic+0x66>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61bb      	str	r3, [r7, #24]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01e      	beq.n	8003b8c <xTaskCreateStatic+0xac>
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01b      	beq.n	8003b8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b66:	2300      	movs	r3, #0
 8003b68:	9303      	str	r3, [sp, #12]
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	9302      	str	r3, [sp, #8]
 8003b6e:	f107 0314 	add.w	r3, r7, #20
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f850 	bl	8003c24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b86:	f000 f8eb 	bl	8003d60 <prvAddNewTaskToReadyList>
 8003b8a:	e001      	b.n	8003b90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b90:	697b      	ldr	r3, [r7, #20]
	}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3728      	adds	r7, #40	; 0x28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b08c      	sub	sp, #48	; 0x30
 8003b9e:	af04      	add	r7, sp, #16
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fa02 	bl	8004fb8 <pvPortMalloc>
 8003bb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bbc:	20b4      	movs	r0, #180	; 0xb4
 8003bbe:	f001 f9fb 	bl	8004fb8 <pvPortMalloc>
 8003bc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd0:	e005      	b.n	8003bde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bd2:	6978      	ldr	r0, [r7, #20]
 8003bd4:	f001 fabc 	bl	8005150 <vPortFree>
 8003bd8:	e001      	b.n	8003bde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d017      	beq.n	8003c14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9303      	str	r3, [sp, #12]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	9302      	str	r3, [sp, #8]
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f80e 	bl	8003c24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c08:	69f8      	ldr	r0, [r7, #28]
 8003c0a:	f000 f8a9 	bl	8003d60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	e002      	b.n	8003c1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f023 0307 	bic.w	r3, r3, #7
 8003c4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	617b      	str	r3, [r7, #20]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01f      	beq.n	8003cb2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	e012      	b.n	8003c9e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	7819      	ldrb	r1, [r3, #0]
 8003c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	3334      	adds	r3, #52	; 0x34
 8003c88:	460a      	mov	r2, r1
 8003c8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b0f      	cmp	r3, #15
 8003ca2:	d9e9      	bls.n	8003c78 <prvInitialiseNewTask+0x54>
 8003ca4:	e000      	b.n	8003ca8 <prvInitialiseNewTask+0x84>
			{
				break;
 8003ca6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb0:	e003      	b.n	8003cba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d901      	bls.n	8003cc4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cc0:	2306      	movs	r3, #6
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fb43 	bl	8003366 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	3318      	adds	r3, #24
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fb3e 	bl	8003366 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	f1c3 0207 	rsb	r2, r3, #7
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	334c      	adds	r3, #76	; 0x4c
 8003d14:	2260      	movs	r2, #96	; 0x60
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fb71 	bl	8005400 <memset>
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <prvInitialiseNewTask+0x130>)
 8003d22:	651a      	str	r2, [r3, #80]	; 0x50
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <prvInitialiseNewTask+0x134>)
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	; (8003d5c <prvInitialiseNewTask+0x138>)
 8003d2e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	69b8      	ldr	r0, [r7, #24]
 8003d36:	f000 feed 	bl	8004b14 <pxPortInitialiseStack>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d4c:	bf00      	nop
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08005e68 	.word	0x08005e68
 8003d58:	08005e88 	.word	0x08005e88
 8003d5c:	08005e48 	.word	0x08005e48

08003d60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d68:	f001 f804 	bl	8004d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d6c:	4b2a      	ldr	r3, [pc, #168]	; (8003e18 <prvAddNewTaskToReadyList+0xb8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <prvAddNewTaskToReadyList+0xb8>)
 8003d74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d7e:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d84:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <prvAddNewTaskToReadyList+0xb8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d110      	bne.n	8003dae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d8c:	f000 fc64 	bl	8004658 <prvInitialiseTaskLists>
 8003d90:	e00d      	b.n	8003dae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d92:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <prvAddNewTaskToReadyList+0xc0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d802      	bhi.n	8003dae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <prvAddNewTaskToReadyList+0xc4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <prvAddNewTaskToReadyList+0xc4>)
 8003db6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <prvAddNewTaskToReadyList+0xc8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <prvAddNewTaskToReadyList+0xc8>)
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <prvAddNewTaskToReadyList+0xcc>)
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7ff facd 	bl	8003380 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003de6:	f000 fff5 	bl	8004dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <prvAddNewTaskToReadyList+0xc0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00e      	beq.n	8003e10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <prvAddNewTaskToReadyList+0xbc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <prvAddNewTaskToReadyList+0xd0>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000540 	.word	0x20000540
 8003e1c:	20000440 	.word	0x20000440
 8003e20:	2000054c 	.word	0x2000054c
 8003e24:	2000055c 	.word	0x2000055c
 8003e28:	20000548 	.word	0x20000548
 8003e2c:	20000444 	.word	0x20000444
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <vTaskDelayUntil+0x2a>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	617b      	str	r3, [r7, #20]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <vTaskDelayUntil+0x46>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	613b      	str	r3, [r7, #16]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8003e7a:	4b2a      	ldr	r3, [pc, #168]	; (8003f24 <vTaskDelayUntil+0xf0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <vTaskDelayUntil+0x64>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	60fb      	str	r3, [r7, #12]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8003e98:	f000 f8e8 	bl	800406c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003e9c:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <vTaskDelayUntil+0xf4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d20b      	bcs.n	8003ece <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d211      	bcs.n	8003ee4 <vTaskDelayUntil+0xb0>
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d90d      	bls.n	8003ee4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ecc:	e00a      	b.n	8003ee4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d303      	bcc.n	8003ee0 <vTaskDelayUntil+0xac>
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d901      	bls.n	8003ee4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fda5 	bl	8004a48 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003efe:	f000 f8c3 	bl	8004088 <xTaskResumeAll>
 8003f02:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d107      	bne.n	8003f1a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <vTaskDelayUntil+0xf8>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f1a:	bf00      	nop
 8003f1c:	3728      	adds	r7, #40	; 0x28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000568 	.word	0x20000568
 8003f28:	20000544 	.word	0x20000544
 8003f2c:	e000ed04 	.word	0xe000ed04

08003f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d017      	beq.n	8003f72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f42:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <vTaskDelay+0x60>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <vTaskDelay+0x30>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	60bb      	str	r3, [r7, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	e7fe      	b.n	8003f5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f60:	f000 f884 	bl	800406c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f64:	2100      	movs	r1, #0
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fd6e 	bl	8004a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f6c:	f000 f88c 	bl	8004088 <xTaskResumeAll>
 8003f70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <vTaskDelay+0x64>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000568 	.word	0x20000568
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fa6:	463a      	mov	r2, r7
 8003fa8:	1d39      	adds	r1, r7, #4
 8003faa:	f107 0308 	add.w	r3, r7, #8
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fae0 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	9202      	str	r2, [sp, #8]
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	460a      	mov	r2, r1
 8003fc6:	4921      	ldr	r1, [pc, #132]	; (800404c <vTaskStartScheduler+0xb4>)
 8003fc8:	4821      	ldr	r0, [pc, #132]	; (8004050 <vTaskStartScheduler+0xb8>)
 8003fca:	f7ff fd89 	bl	8003ae0 <xTaskCreateStatic>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a20      	ldr	r2, [pc, #128]	; (8004054 <vTaskStartScheduler+0xbc>)
 8003fd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fd4:	4b1f      	ldr	r3, [pc, #124]	; (8004054 <vTaskStartScheduler+0xbc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e001      	b.n	8003fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d11b      	bne.n	8004024 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	613b      	str	r3, [r7, #16]
}
 8003ffe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004000:	4b15      	ldr	r3, [pc, #84]	; (8004058 <vTaskStartScheduler+0xc0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	334c      	adds	r3, #76	; 0x4c
 8004006:	4a15      	ldr	r2, [pc, #84]	; (800405c <vTaskStartScheduler+0xc4>)
 8004008:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <vTaskStartScheduler+0xc8>)
 800400c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004010:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <vTaskStartScheduler+0xcc>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004018:	4b13      	ldr	r3, [pc, #76]	; (8004068 <vTaskStartScheduler+0xd0>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800401e:	f000 fe07 	bl	8004c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004022:	e00e      	b.n	8004042 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402a:	d10a      	bne.n	8004042 <vTaskStartScheduler+0xaa>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60fb      	str	r3, [r7, #12]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <vTaskStartScheduler+0xa8>
}
 8004042:	bf00      	nop
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	08005e28 	.word	0x08005e28
 8004050:	08004629 	.word	0x08004629
 8004054:	20000564 	.word	0x20000564
 8004058:	20000440 	.word	0x20000440
 800405c:	20000010 	.word	0x20000010
 8004060:	20000560 	.word	0x20000560
 8004064:	2000054c 	.word	0x2000054c
 8004068:	20000544 	.word	0x20000544

0800406c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <vTaskSuspendAll+0x18>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	4a03      	ldr	r2, [pc, #12]	; (8004084 <vTaskSuspendAll+0x18>)
 8004078:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800407a:	bf00      	nop
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000568 	.word	0x20000568

08004088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004096:	4b41      	ldr	r3, [pc, #260]	; (800419c <xTaskResumeAll+0x114>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	603b      	str	r3, [r7, #0]
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040b4:	f000 fe5e 	bl	8004d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040b8:	4b38      	ldr	r3, [pc, #224]	; (800419c <xTaskResumeAll+0x114>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3b01      	subs	r3, #1
 80040be:	4a37      	ldr	r2, [pc, #220]	; (800419c <xTaskResumeAll+0x114>)
 80040c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c2:	4b36      	ldr	r3, [pc, #216]	; (800419c <xTaskResumeAll+0x114>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d161      	bne.n	800418e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040ca:	4b35      	ldr	r3, [pc, #212]	; (80041a0 <xTaskResumeAll+0x118>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d05d      	beq.n	800418e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040d2:	e02e      	b.n	8004132 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d4:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <xTaskResumeAll+0x11c>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3318      	adds	r3, #24
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff f9aa 	bl	800343a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3304      	adds	r3, #4
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff f9a5 	bl	800343a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	2201      	movs	r2, #1
 80040f6:	409a      	lsls	r2, r3
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <xTaskResumeAll+0x120>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <xTaskResumeAll+0x120>)
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4a27      	ldr	r2, [pc, #156]	; (80041ac <xTaskResumeAll+0x124>)
 8004110:	441a      	add	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3304      	adds	r3, #4
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f7ff f931 	bl	8003380 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <xTaskResumeAll+0x128>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <xTaskResumeAll+0x12c>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004132:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <xTaskResumeAll+0x11c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1cc      	bne.n	80040d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004140:	f000 fb2c 	bl	800479c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004144:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <xTaskResumeAll+0x130>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d010      	beq.n	8004172 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004150:	f000 f846 	bl	80041e0 <xTaskIncrementTick>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <xTaskResumeAll+0x12c>)
 800415c:	2201      	movs	r2, #1
 800415e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3b01      	subs	r3, #1
 8004164:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f1      	bne.n	8004150 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800416c:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <xTaskResumeAll+0x130>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <xTaskResumeAll+0x12c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <xTaskResumeAll+0x134>)
 8004180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800418e:	f000 fe21 	bl	8004dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8004192:	68bb      	ldr	r3, [r7, #8]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000568 	.word	0x20000568
 80041a0:	20000540 	.word	0x20000540
 80041a4:	20000500 	.word	0x20000500
 80041a8:	20000548 	.word	0x20000548
 80041ac:	20000444 	.word	0x20000444
 80041b0:	20000440 	.word	0x20000440
 80041b4:	20000554 	.word	0x20000554
 80041b8:	20000550 	.word	0x20000550
 80041bc:	e000ed04 	.word	0xe000ed04

080041c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <xTaskGetTickCount+0x1c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041cc:	687b      	ldr	r3, [r7, #4]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000544 	.word	0x20000544

080041e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041ea:	4b4e      	ldr	r3, [pc, #312]	; (8004324 <xTaskIncrementTick+0x144>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 808e 	bne.w	8004310 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041f4:	4b4c      	ldr	r3, [pc, #304]	; (8004328 <xTaskIncrementTick+0x148>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041fc:	4a4a      	ldr	r2, [pc, #296]	; (8004328 <xTaskIncrementTick+0x148>)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d120      	bne.n	800424a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004208:	4b48      	ldr	r3, [pc, #288]	; (800432c <xTaskIncrementTick+0x14c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <xTaskIncrementTick+0x48>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	603b      	str	r3, [r7, #0]
}
 8004224:	bf00      	nop
 8004226:	e7fe      	b.n	8004226 <xTaskIncrementTick+0x46>
 8004228:	4b40      	ldr	r3, [pc, #256]	; (800432c <xTaskIncrementTick+0x14c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	4b40      	ldr	r3, [pc, #256]	; (8004330 <xTaskIncrementTick+0x150>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a3e      	ldr	r2, [pc, #248]	; (800432c <xTaskIncrementTick+0x14c>)
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4a3e      	ldr	r2, [pc, #248]	; (8004330 <xTaskIncrementTick+0x150>)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <xTaskIncrementTick+0x154>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	4a3c      	ldr	r2, [pc, #240]	; (8004334 <xTaskIncrementTick+0x154>)
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	f000 faa9 	bl	800479c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800424a:	4b3b      	ldr	r3, [pc, #236]	; (8004338 <xTaskIncrementTick+0x158>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	429a      	cmp	r2, r3
 8004252:	d348      	bcc.n	80042e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004254:	4b35      	ldr	r3, [pc, #212]	; (800432c <xTaskIncrementTick+0x14c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425e:	4b36      	ldr	r3, [pc, #216]	; (8004338 <xTaskIncrementTick+0x158>)
 8004260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004264:	601a      	str	r2, [r3, #0]
					break;
 8004266:	e03e      	b.n	80042e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004268:	4b30      	ldr	r3, [pc, #192]	; (800432c <xTaskIncrementTick+0x14c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d203      	bcs.n	8004288 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004280:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <xTaskIncrementTick+0x158>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004286:	e02e      	b.n	80042e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff f8d4 	bl	800343a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	3318      	adds	r3, #24
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff f8cb 	bl	800343a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	4b23      	ldr	r3, [pc, #140]	; (800433c <xTaskIncrementTick+0x15c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	4a22      	ldr	r2, [pc, #136]	; (800433c <xTaskIncrementTick+0x15c>)
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <xTaskIncrementTick+0x160>)
 80042c4:	441a      	add	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	3304      	adds	r3, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f7ff f857 	bl	8003380 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <xTaskIncrementTick+0x164>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	429a      	cmp	r2, r3
 80042de:	d3b9      	bcc.n	8004254 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042e0:	2301      	movs	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042e4:	e7b6      	b.n	8004254 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042e6:	4b17      	ldr	r3, [pc, #92]	; (8004344 <xTaskIncrementTick+0x164>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ec:	4914      	ldr	r1, [pc, #80]	; (8004340 <xTaskIncrementTick+0x160>)
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d901      	bls.n	8004302 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80042fe:	2301      	movs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <xTaskIncrementTick+0x168>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800430a:	2301      	movs	r3, #1
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e004      	b.n	800431a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <xTaskIncrementTick+0x16c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	4a0d      	ldr	r2, [pc, #52]	; (800434c <xTaskIncrementTick+0x16c>)
 8004318:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800431a:	697b      	ldr	r3, [r7, #20]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000568 	.word	0x20000568
 8004328:	20000544 	.word	0x20000544
 800432c:	200004f8 	.word	0x200004f8
 8004330:	200004fc 	.word	0x200004fc
 8004334:	20000558 	.word	0x20000558
 8004338:	20000560 	.word	0x20000560
 800433c:	20000548 	.word	0x20000548
 8004340:	20000444 	.word	0x20000444
 8004344:	20000440 	.word	0x20000440
 8004348:	20000554 	.word	0x20000554
 800434c:	20000550 	.word	0x20000550

08004350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <vTaskSwitchContext+0xac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800435e:	4b28      	ldr	r3, [pc, #160]	; (8004400 <vTaskSwitchContext+0xb0>)
 8004360:	2201      	movs	r2, #1
 8004362:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004364:	e044      	b.n	80043f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <vTaskSwitchContext+0xb0>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <vTaskSwitchContext+0xb4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800437a:	7afb      	ldrb	r3, [r7, #11]
 800437c:	f1c3 031f 	rsb	r3, r3, #31
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	4921      	ldr	r1, [pc, #132]	; (8004408 <vTaskSwitchContext+0xb8>)
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	607b      	str	r3, [r7, #4]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <vTaskSwitchContext+0x5a>
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4a14      	ldr	r2, [pc, #80]	; (8004408 <vTaskSwitchContext+0xb8>)
 80043b8:	4413      	add	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	3308      	adds	r3, #8
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d104      	bne.n	80043dc <vTaskSwitchContext+0x8c>
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <vTaskSwitchContext+0xbc>)
 80043e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <vTaskSwitchContext+0xbc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	334c      	adds	r3, #76	; 0x4c
 80043ec:	4a08      	ldr	r2, [pc, #32]	; (8004410 <vTaskSwitchContext+0xc0>)
 80043ee:	6013      	str	r3, [r2, #0]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000568 	.word	0x20000568
 8004400:	20000554 	.word	0x20000554
 8004404:	20000548 	.word	0x20000548
 8004408:	20000444 	.word	0x20000444
 800440c:	20000440 	.word	0x20000440
 8004410:	20000010 	.word	0x20000010

08004414 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <vTaskPlaceOnEventList+0x44>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3318      	adds	r3, #24
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fe ffc0 	bl	80033c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004448:	2101      	movs	r1, #1
 800444a:	6838      	ldr	r0, [r7, #0]
 800444c:	f000 fafc 	bl	8004a48 <prvAddCurrentTaskToDelayedList>
}
 8004450:	bf00      	nop
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000440 	.word	0x20000440

0800445c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	60fb      	str	r3, [r7, #12]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	3318      	adds	r3, #24
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe ffd4 	bl	800343a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <xTaskRemoveFromEventList+0xac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11c      	bne.n	80044d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3304      	adds	r3, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe ffcb 	bl	800343a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	2201      	movs	r2, #1
 80044aa:	409a      	lsls	r2, r3
 80044ac:	4b17      	ldr	r3, [pc, #92]	; (800450c <xTaskRemoveFromEventList+0xb0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	4a16      	ldr	r2, [pc, #88]	; (800450c <xTaskRemoveFromEventList+0xb0>)
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <xTaskRemoveFromEventList+0xb4>)
 80044c4:	441a      	add	r2, r3
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7fe ff57 	bl	8003380 <vListInsertEnd>
 80044d2:	e005      	b.n	80044e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	3318      	adds	r3, #24
 80044d8:	4619      	mov	r1, r3
 80044da:	480e      	ldr	r0, [pc, #56]	; (8004514 <xTaskRemoveFromEventList+0xb8>)
 80044dc:	f7fe ff50 	bl	8003380 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <xTaskRemoveFromEventList+0xbc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d905      	bls.n	80044fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044ee:	2301      	movs	r3, #1
 80044f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <xTaskRemoveFromEventList+0xc0>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	e001      	b.n	80044fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044fe:	697b      	ldr	r3, [r7, #20]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000568 	.word	0x20000568
 800450c:	20000548 	.word	0x20000548
 8004510:	20000444 	.word	0x20000444
 8004514:	20000500 	.word	0x20000500
 8004518:	20000440 	.word	0x20000440
 800451c:	20000554 	.word	0x20000554

08004520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <vTaskInternalSetTimeOutState+0x24>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <vTaskInternalSetTimeOutState+0x28>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	605a      	str	r2, [r3, #4]
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	20000558 	.word	0x20000558
 8004548:	20000544 	.word	0x20000544

0800454c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	613b      	str	r3, [r7, #16]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60fb      	str	r3, [r7, #12]
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800458e:	f000 fbf1 	bl	8004d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <xTaskCheckForTimeOut+0xbc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045aa:	d102      	bne.n	80045b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	e023      	b.n	80045fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <xTaskCheckForTimeOut+0xc0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d007      	beq.n	80045ce <xTaskCheckForTimeOut+0x82>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	e015      	b.n	80045fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d20b      	bcs.n	80045f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad2      	subs	r2, r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff9b 	bl	8004520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e004      	b.n	80045fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045f6:	2301      	movs	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045fa:	f000 fbeb 	bl	8004dd4 <vPortExitCritical>

	return xReturn;
 80045fe:	69fb      	ldr	r3, [r7, #28]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3720      	adds	r7, #32
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000544 	.word	0x20000544
 800460c:	20000558 	.word	0x20000558

08004610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <vTaskMissedYield+0x14>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	20000554 	.word	0x20000554

08004628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004630:	f000 f852 	bl	80046d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <prvIdleTask+0x28>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d9f9      	bls.n	8004630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <prvIdleTask+0x2c>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800464c:	e7f0      	b.n	8004630 <prvIdleTask+0x8>
 800464e:	bf00      	nop
 8004650:	20000444 	.word	0x20000444
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e00c      	b.n	800467e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <prvInitialiseTaskLists+0x60>)
 8004670:	4413      	add	r3, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fe57 	bl	8003326 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3301      	adds	r3, #1
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b06      	cmp	r3, #6
 8004682:	d9ef      	bls.n	8004664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004684:	480d      	ldr	r0, [pc, #52]	; (80046bc <prvInitialiseTaskLists+0x64>)
 8004686:	f7fe fe4e 	bl	8003326 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800468a:	480d      	ldr	r0, [pc, #52]	; (80046c0 <prvInitialiseTaskLists+0x68>)
 800468c:	f7fe fe4b 	bl	8003326 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004690:	480c      	ldr	r0, [pc, #48]	; (80046c4 <prvInitialiseTaskLists+0x6c>)
 8004692:	f7fe fe48 	bl	8003326 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004696:	480c      	ldr	r0, [pc, #48]	; (80046c8 <prvInitialiseTaskLists+0x70>)
 8004698:	f7fe fe45 	bl	8003326 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800469c:	480b      	ldr	r0, [pc, #44]	; (80046cc <prvInitialiseTaskLists+0x74>)
 800469e:	f7fe fe42 	bl	8003326 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <prvInitialiseTaskLists+0x78>)
 80046a4:	4a05      	ldr	r2, [pc, #20]	; (80046bc <prvInitialiseTaskLists+0x64>)
 80046a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <prvInitialiseTaskLists+0x7c>)
 80046aa:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <prvInitialiseTaskLists+0x68>)
 80046ac:	601a      	str	r2, [r3, #0]
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000444 	.word	0x20000444
 80046bc:	200004d0 	.word	0x200004d0
 80046c0:	200004e4 	.word	0x200004e4
 80046c4:	20000500 	.word	0x20000500
 80046c8:	20000514 	.word	0x20000514
 80046cc:	2000052c 	.word	0x2000052c
 80046d0:	200004f8 	.word	0x200004f8
 80046d4:	200004fc 	.word	0x200004fc

080046d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046de:	e019      	b.n	8004714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046e0:	f000 fb48 	bl	8004d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e4:	4b10      	ldr	r3, [pc, #64]	; (8004728 <prvCheckTasksWaitingTermination+0x50>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fea2 	bl	800343a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <prvCheckTasksWaitingTermination+0x54>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a0b      	ldr	r2, [pc, #44]	; (800472c <prvCheckTasksWaitingTermination+0x54>)
 80046fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <prvCheckTasksWaitingTermination+0x58>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <prvCheckTasksWaitingTermination+0x58>)
 8004708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800470a:	f000 fb63 	bl	8004dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f810 	bl	8004734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <prvCheckTasksWaitingTermination+0x58>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e1      	bne.n	80046e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000514 	.word	0x20000514
 800472c:	20000540 	.word	0x20000540
 8004730:	20000528 	.word	0x20000528

08004734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	334c      	adds	r3, #76	; 0x4c
 8004740:	4618      	mov	r0, r3
 8004742:	f000 ff07 	bl	8005554 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d108      	bne.n	8004762 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fcfb 	bl	8005150 <vPortFree>
				vPortFree( pxTCB );
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fcf8 	bl	8005150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004760:	e018      	b.n	8004794 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d103      	bne.n	8004774 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fcef 	bl	8005150 <vPortFree>
	}
 8004772:	e00f      	b.n	8004794 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800477a:	2b02      	cmp	r3, #2
 800477c:	d00a      	beq.n	8004794 <prvDeleteTCB+0x60>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60fb      	str	r3, [r7, #12]
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <prvDeleteTCB+0x5e>
	}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <prvResetNextTaskUnblockTime+0x38>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <prvResetNextTaskUnblockTime+0x3c>)
 80047ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047b4:	e008      	b.n	80047c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <prvResetNextTaskUnblockTime+0x38>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <prvResetNextTaskUnblockTime+0x3c>)
 80047c6:	6013      	str	r3, [r2, #0]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	200004f8 	.word	0x200004f8
 80047d8:	20000560 	.word	0x20000560

080047dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <xTaskGetSchedulerState+0x34>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047ea:	2301      	movs	r3, #1
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	e008      	b.n	8004802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <xTaskGetSchedulerState+0x38>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047f8:	2302      	movs	r3, #2
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	e001      	b.n	8004802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004802:	687b      	ldr	r3, [r7, #4]
	}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	2000054c 	.word	0x2000054c
 8004814:	20000568 	.word	0x20000568

08004818 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d05e      	beq.n	80048ec <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004832:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <xTaskPriorityInherit+0xe0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	429a      	cmp	r2, r3
 800483a:	d24e      	bcs.n	80048da <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	db06      	blt.n	8004852 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004844:	4b2c      	ldr	r3, [pc, #176]	; (80048f8 <xTaskPriorityInherit+0xe0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	f1c3 0207 	rsb	r2, r3, #7
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	6959      	ldr	r1, [r3, #20]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4a26      	ldr	r2, [pc, #152]	; (80048fc <xTaskPriorityInherit+0xe4>)
 8004864:	4413      	add	r3, r2
 8004866:	4299      	cmp	r1, r3
 8004868:	d12f      	bne.n	80048ca <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fde3 	bl	800343a <uxListRemove>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	2201      	movs	r2, #1
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43da      	mvns	r2, r3
 8004886:	4b1e      	ldr	r3, [pc, #120]	; (8004900 <xTaskPriorityInherit+0xe8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4013      	ands	r3, r2
 800488c:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <xTaskPriorityInherit+0xe8>)
 800488e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <xTaskPriorityInherit+0xe0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	2201      	movs	r2, #1
 80048a0:	409a      	lsls	r2, r3
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <xTaskPriorityInherit+0xe8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	4a15      	ldr	r2, [pc, #84]	; (8004900 <xTaskPriorityInherit+0xe8>)
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4a10      	ldr	r2, [pc, #64]	; (80048fc <xTaskPriorityInherit+0xe4>)
 80048ba:	441a      	add	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f7fe fd5c 	bl	8003380 <vListInsertEnd>
 80048c8:	e004      	b.n	80048d4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048ca:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <xTaskPriorityInherit+0xe0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80048d4:	2301      	movs	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e008      	b.n	80048ec <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <xTaskPriorityInherit+0xe0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d201      	bcs.n	80048ec <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048ec:	68fb      	ldr	r3, [r7, #12]
	}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000440 	.word	0x20000440
 80048fc:	20000444 	.word	0x20000444
 8004900:	20000548 	.word	0x20000548

08004904 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004912:	2301      	movs	r3, #1
 8004914:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d077      	beq.n	8004a0c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	60fb      	str	r3, [r7, #12]
}
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d902      	bls.n	800494a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e002      	b.n	8004950 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	429a      	cmp	r2, r3
 8004958:	d058      	beq.n	8004a0c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	429a      	cmp	r2, r3
 8004962:	d153      	bne.n	8004a0c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004964:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	429a      	cmp	r2, r3
 800496c:	d10a      	bne.n	8004984 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	60bb      	str	r3, [r7, #8]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	db04      	blt.n	80049a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f1c3 0207 	rsb	r2, r3, #7
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	6959      	ldr	r1, [r3, #20]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80049b2:	4413      	add	r3, r2
 80049b4:	4299      	cmp	r1, r3
 80049b6:	d129      	bne.n	8004a0c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fd3c 	bl	800343a <uxListRemove>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	2201      	movs	r2, #1
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43da      	mvns	r2, r3
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4013      	ands	r3, r2
 80049da:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	2201      	movs	r2, #1
 80049e4:	409a      	lsls	r2, r3
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4a06      	ldr	r2, [pc, #24]	; (8004a18 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80049fe:	441a      	add	r2, r3
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f7fe fcba 	bl	8003380 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a0c:	bf00      	nop
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000440 	.word	0x20000440
 8004a18:	20000444 	.word	0x20000444
 8004a1c:	20000548 	.word	0x20000548

08004a20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a32:	3201      	adds	r2, #1
 8004a34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004a36:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a38:	681b      	ldr	r3, [r3, #0]
	}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	20000440 	.word	0x20000440

08004a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a52:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a58:	4b28      	ldr	r3, [pc, #160]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fceb 	bl	800343a <uxListRemove>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	2201      	movs	r2, #1
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43da      	mvns	r2, r3
 8004a78:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	4a20      	ldr	r2, [pc, #128]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a88:	d10a      	bne.n	8004aa0 <prvAddCurrentTaskToDelayedList+0x58>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a90:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	481a      	ldr	r0, [pc, #104]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a9a:	f7fe fc71 	bl	8003380 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a9e:	e026      	b.n	8004aee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aa8:	4b14      	ldr	r3, [pc, #80]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d209      	bcs.n	8004acc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab8:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	f7fe fc7f 	bl	80033c8 <vListInsert>
}
 8004aca:	e010      	b.n	8004aee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f7fe fc75 	bl	80033c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d202      	bcs.n	8004aee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ae8:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6013      	str	r3, [r2, #0]
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000544 	.word	0x20000544
 8004afc:	20000440 	.word	0x20000440
 8004b00:	20000548 	.word	0x20000548
 8004b04:	2000052c 	.word	0x2000052c
 8004b08:	200004fc 	.word	0x200004fc
 8004b0c:	200004f8 	.word	0x200004f8
 8004b10:	20000560 	.word	0x20000560

08004b14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3b04      	subs	r3, #4
 8004b24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3b04      	subs	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 0201 	bic.w	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b44:	4a0c      	ldr	r2, [pc, #48]	; (8004b78 <pxPortInitialiseStack+0x64>)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3b14      	subs	r3, #20
 8004b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3b04      	subs	r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f06f 0202 	mvn.w	r2, #2
 8004b62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3b20      	subs	r3, #32
 8004b68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	08004b7d 	.word	0x08004b7d

08004b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <prvTaskExitError+0x54>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b8e:	d00a      	beq.n	8004ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	60fb      	str	r3, [r7, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <prvTaskExitError+0x28>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	60bb      	str	r3, [r7, #8]
}
 8004bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bba:	bf00      	nop
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0fc      	beq.n	8004bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	2000000c 	.word	0x2000000c
	...

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	4770      	bx	lr
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst2>:
 8004c00:	20000440 	.word	0x20000440
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c08:	4808      	ldr	r0, [pc, #32]	; (8004c2c <prvPortStartFirstTask+0x24>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8814 	msr	CONTROL, r0
 8004c1a:	b662      	cpsie	i
 8004c1c:	b661      	cpsie	f
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	df00      	svc	0
 8004c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c2a:	bf00      	nop
 8004c2c:	e000ed08 	.word	0xe000ed08

08004c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c36:	4b46      	ldr	r3, [pc, #280]	; (8004d50 <xPortStartScheduler+0x120>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a46      	ldr	r2, [pc, #280]	; (8004d54 <xPortStartScheduler+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10a      	bne.n	8004c56 <xPortStartScheduler+0x26>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	613b      	str	r3, [r7, #16]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c56:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <xPortStartScheduler+0x120>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <xPortStartScheduler+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10a      	bne.n	8004c76 <xPortStartScheduler+0x46>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c76:	4b39      	ldr	r3, [pc, #228]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <xPortStartScheduler+0x130>)
 8004c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c9e:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <xPortStartScheduler+0x134>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ca4:	e009      	b.n	8004cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <xPortStartScheduler+0x134>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d0ef      	beq.n	8004ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cc6:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1c3 0307 	rsb	r3, r3, #7
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d00a      	beq.n	8004ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60bb      	str	r3, [r7, #8]
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <xPortStartScheduler+0x134>)
 8004cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a14      	ldr	r2, [pc, #80]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d1e:	f000 f8dd 	bl	8004edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <xPortStartScheduler+0x13c>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d28:	f000 f8fc 	bl	8004f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d2c:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <xPortStartScheduler+0x140>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <xPortStartScheduler+0x140>)
 8004d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d38:	f7ff ff66 	bl	8004c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d3c:	f7ff fb08 	bl	8004350 <vTaskSwitchContext>
	prvTaskExitError();
 8004d40:	f7ff ff1c 	bl	8004b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	e000ed00 	.word	0xe000ed00
 8004d54:	410fc271 	.word	0x410fc271
 8004d58:	410fc270 	.word	0x410fc270
 8004d5c:	e000e400 	.word	0xe000e400
 8004d60:	2000056c 	.word	0x2000056c
 8004d64:	20000570 	.word	0x20000570
 8004d68:	e000ed20 	.word	0xe000ed20
 8004d6c:	2000000c 	.word	0x2000000c
 8004d70:	e000ef34 	.word	0xe000ef34

08004d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	607b      	str	r3, [r7, #4]
}
 8004d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <vPortEnterCritical+0x58>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10f      	bne.n	8004dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <vPortEnterCritical+0x5c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	603b      	str	r3, [r7, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <vPortEnterCritical+0x4a>
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	2000000c 	.word	0x2000000c
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dda:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <vPortExitCritical+0x50>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <vPortExitCritical+0x24>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	607b      	str	r3, [r7, #4]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <vPortExitCritical+0x50>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <vPortExitCritical+0x50>)
 8004e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <vPortExitCritical+0x50>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <vPortExitCritical+0x42>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f383 8811 	msr	BASEPRI, r3
}
 8004e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	2000000c 	.word	0x2000000c
	...

08004e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e30:	f3ef 8009 	mrs	r0, PSP
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <pxCurrentTCBConst>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	f01e 0f10 	tst.w	lr, #16
 8004e40:	bf08      	it	eq
 8004e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	6010      	str	r0, [r2, #0]
 8004e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e54:	f380 8811 	msr	BASEPRI, r0
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f7ff fa76 	bl	8004350 <vTaskSwitchContext>
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f380 8811 	msr	BASEPRI, r0
 8004e6c:	bc09      	pop	{r0, r3}
 8004e6e:	6819      	ldr	r1, [r3, #0]
 8004e70:	6808      	ldr	r0, [r1, #0]
 8004e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e76:	f01e 0f10 	tst.w	lr, #16
 8004e7a:	bf08      	it	eq
 8004e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e80:	f380 8809 	msr	PSP, r0
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	f3af 8000 	nop.w

08004e90 <pxCurrentTCBConst>:
 8004e90:	20000440 	.word	0x20000440
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop

08004e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004eb2:	f7ff f995 	bl	80041e0 <xTaskIncrementTick>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <SysTick_Handler+0x40>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f383 8811 	msr	BASEPRI, r3
}
 8004ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <vPortSetupTimerInterrupt+0x38>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eec:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <vPortSetupTimerInterrupt+0x3c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a0a      	ldr	r2, [pc, #40]	; (8004f1c <vPortSetupTimerInterrupt+0x40>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	099b      	lsrs	r3, r3, #6
 8004ef8:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <vPortSetupTimerInterrupt+0x44>)
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004efe:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e010 	.word	0xe000e010
 8004f14:	e000e018 	.word	0xe000e018
 8004f18:	20000000 	.word	0x20000000
 8004f1c:	10624dd3 	.word	0x10624dd3
 8004f20:	e000e014 	.word	0xe000e014

08004f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f34 <vPortEnableVFP+0x10>
 8004f28:	6801      	ldr	r1, [r0, #0]
 8004f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f2e:	6001      	str	r1, [r0, #0]
 8004f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f32:	bf00      	nop
 8004f34:	e000ed88 	.word	0xe000ed88

08004f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f3e:	f3ef 8305 	mrs	r3, IPSR
 8004f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b0f      	cmp	r3, #15
 8004f48:	d914      	bls.n	8004f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <vPortValidateInterruptPriority+0x70>)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f54:	4b15      	ldr	r3, [pc, #84]	; (8004fac <vPortValidateInterruptPriority+0x74>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	7afa      	ldrb	r2, [r7, #11]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d20a      	bcs.n	8004f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	607b      	str	r3, [r7, #4]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <vPortValidateInterruptPriority+0x78>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <vPortValidateInterruptPriority+0x7c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d90a      	bls.n	8004f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	603b      	str	r3, [r7, #0]
}
 8004f96:	bf00      	nop
 8004f98:	e7fe      	b.n	8004f98 <vPortValidateInterruptPriority+0x60>
	}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000e3f0 	.word	0xe000e3f0
 8004fac:	2000056c 	.word	0x2000056c
 8004fb0:	e000ed0c 	.word	0xe000ed0c
 8004fb4:	20000570 	.word	0x20000570

08004fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	; 0x28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fc4:	f7ff f852 	bl	800406c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fc8:	4b5b      	ldr	r3, [pc, #364]	; (8005138 <pvPortMalloc+0x180>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fd0:	f000 f920 	bl	8005214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fd4:	4b59      	ldr	r3, [pc, #356]	; (800513c <pvPortMalloc+0x184>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 8093 	bne.w	8005108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01d      	beq.n	8005024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fe8:	2208      	movs	r2, #8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d014      	beq.n	8005024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	3308      	adds	r3, #8
 8005002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <pvPortMalloc+0x6c>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	617b      	str	r3, [r7, #20]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d06e      	beq.n	8005108 <pvPortMalloc+0x150>
 800502a:	4b45      	ldr	r3, [pc, #276]	; (8005140 <pvPortMalloc+0x188>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d869      	bhi.n	8005108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <pvPortMalloc+0x18c>)
 8005036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005038:	4b42      	ldr	r3, [pc, #264]	; (8005144 <pvPortMalloc+0x18c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800503e:	e004      	b.n	800504a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d903      	bls.n	800505c <pvPortMalloc+0xa4>
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f1      	bne.n	8005040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800505c:	4b36      	ldr	r3, [pc, #216]	; (8005138 <pvPortMalloc+0x180>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005062:	429a      	cmp	r2, r3
 8005064:	d050      	beq.n	8005108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2208      	movs	r2, #8
 800506c:	4413      	add	r3, r2
 800506e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1ad2      	subs	r2, r2, r3
 8005080:	2308      	movs	r3, #8
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	429a      	cmp	r2, r3
 8005086:	d91f      	bls.n	80050c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <pvPortMalloc+0xf8>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	613b      	str	r3, [r7, #16]
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050c2:	69b8      	ldr	r0, [r7, #24]
 80050c4:	f000 f908 	bl	80052d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050c8:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <pvPortMalloc+0x188>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <pvPortMalloc+0x188>)
 80050d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <pvPortMalloc+0x188>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <pvPortMalloc+0x190>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d203      	bcs.n	80050ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050e2:	4b17      	ldr	r3, [pc, #92]	; (8005140 <pvPortMalloc+0x188>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a18      	ldr	r2, [pc, #96]	; (8005148 <pvPortMalloc+0x190>)
 80050e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <pvPortMalloc+0x184>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <pvPortMalloc+0x194>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	4a11      	ldr	r2, [pc, #68]	; (800514c <pvPortMalloc+0x194>)
 8005106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005108:	f7fe ffbe 	bl	8004088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <pvPortMalloc+0x174>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60fb      	str	r3, [r7, #12]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <pvPortMalloc+0x172>
	return pvReturn;
 800512c:	69fb      	ldr	r3, [r7, #28]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3728      	adds	r7, #40	; 0x28
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	2000417c 	.word	0x2000417c
 800513c:	20004190 	.word	0x20004190
 8005140:	20004180 	.word	0x20004180
 8005144:	20004174 	.word	0x20004174
 8005148:	20004184 	.word	0x20004184
 800514c:	20004188 	.word	0x20004188

08005150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d04d      	beq.n	80051fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005162:	2308      	movs	r3, #8
 8005164:	425b      	negs	r3, r3
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4413      	add	r3, r2
 800516a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	4b24      	ldr	r3, [pc, #144]	; (8005208 <vPortFree+0xb8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4013      	ands	r3, r2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <vPortFree+0x44>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	60fb      	str	r3, [r7, #12]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <vPortFree+0x62>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	60bb      	str	r3, [r7, #8]
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <vPortFree+0xb8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01e      	beq.n	80051fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d11a      	bne.n	80051fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <vPortFree+0xb8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	401a      	ands	r2, r3
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051d8:	f7fe ff48 	bl	800406c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <vPortFree+0xbc>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4413      	add	r3, r2
 80051e6:	4a09      	ldr	r2, [pc, #36]	; (800520c <vPortFree+0xbc>)
 80051e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051ea:	6938      	ldr	r0, [r7, #16]
 80051ec:	f000 f874 	bl	80052d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <vPortFree+0xc0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	4a06      	ldr	r2, [pc, #24]	; (8005210 <vPortFree+0xc0>)
 80051f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051fa:	f7fe ff45 	bl	8004088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20004190 	.word	0x20004190
 800520c:	20004180 	.word	0x20004180
 8005210:	2000418c 	.word	0x2000418c

08005214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800521a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800521e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005220:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <prvHeapInit+0xac>)
 8005222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00c      	beq.n	8005248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3307      	adds	r3, #7
 8005232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0307 	bic.w	r3, r3, #7
 800523a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <prvHeapInit+0xac>)
 8005244:	4413      	add	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800524c:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <prvHeapInit+0xb0>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005252:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <prvHeapInit+0xb0>)
 8005254:	2200      	movs	r2, #0
 8005256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	4413      	add	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005260:	2208      	movs	r2, #8
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <prvHeapInit+0xb4>)
 8005274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005276:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <prvHeapInit+0xb4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2200      	movs	r2, #0
 800527c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <prvHeapInit+0xb4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005294:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <prvHeapInit+0xb4>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <prvHeapInit+0xb8>)
 80052a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <prvHeapInit+0xbc>)
 80052aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <prvHeapInit+0xc0>)
 80052ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	20000574 	.word	0x20000574
 80052c4:	20004174 	.word	0x20004174
 80052c8:	2000417c 	.word	0x2000417c
 80052cc:	20004184 	.word	0x20004184
 80052d0:	20004180 	.word	0x20004180
 80052d4:	20004190 	.word	0x20004190

080052d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052e0:	4b28      	ldr	r3, [pc, #160]	; (8005384 <prvInsertBlockIntoFreeList+0xac>)
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	e002      	b.n	80052ec <prvInsertBlockIntoFreeList+0x14>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d8f7      	bhi.n	80052e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4413      	add	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d108      	bne.n	800531a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	441a      	add	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	441a      	add	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d118      	bne.n	8005360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b15      	ldr	r3, [pc, #84]	; (8005388 <prvInsertBlockIntoFreeList+0xb0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d00d      	beq.n	8005356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	441a      	add	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e008      	b.n	8005368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005356:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <prvInsertBlockIntoFreeList+0xb0>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e003      	b.n	8005368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d002      	beq.n	8005376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20004174 	.word	0x20004174
 8005388:	2000417c 	.word	0x2000417c

0800538c <__errno>:
 800538c:	4b01      	ldr	r3, [pc, #4]	; (8005394 <__errno+0x8>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000010 	.word	0x20000010

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	4d0d      	ldr	r5, [pc, #52]	; (80053d0 <__libc_init_array+0x38>)
 800539c:	4c0d      	ldr	r4, [pc, #52]	; (80053d4 <__libc_init_array+0x3c>)
 800539e:	1b64      	subs	r4, r4, r5
 80053a0:	10a4      	asrs	r4, r4, #2
 80053a2:	2600      	movs	r6, #0
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	4d0b      	ldr	r5, [pc, #44]	; (80053d8 <__libc_init_array+0x40>)
 80053aa:	4c0c      	ldr	r4, [pc, #48]	; (80053dc <__libc_init_array+0x44>)
 80053ac:	f000 fcf8 	bl	8005da0 <_init>
 80053b0:	1b64      	subs	r4, r4, r5
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	2600      	movs	r6, #0
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	08005ee4 	.word	0x08005ee4
 80053d4:	08005ee4 	.word	0x08005ee4
 80053d8:	08005ee4 	.word	0x08005ee4
 80053dc:	08005ee8 	.word	0x08005ee8

080053e0 <__retarget_lock_acquire_recursive>:
 80053e0:	4770      	bx	lr

080053e2 <__retarget_lock_release_recursive>:
 80053e2:	4770      	bx	lr

080053e4 <memcpy>:
 80053e4:	440a      	add	r2, r1
 80053e6:	4291      	cmp	r1, r2
 80053e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80053ec:	d100      	bne.n	80053f0 <memcpy+0xc>
 80053ee:	4770      	bx	lr
 80053f0:	b510      	push	{r4, lr}
 80053f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fa:	4291      	cmp	r1, r2
 80053fc:	d1f9      	bne.n	80053f2 <memcpy+0xe>
 80053fe:	bd10      	pop	{r4, pc}

08005400 <memset>:
 8005400:	4402      	add	r2, r0
 8005402:	4603      	mov	r3, r0
 8005404:	4293      	cmp	r3, r2
 8005406:	d100      	bne.n	800540a <memset+0xa>
 8005408:	4770      	bx	lr
 800540a:	f803 1b01 	strb.w	r1, [r3], #1
 800540e:	e7f9      	b.n	8005404 <memset+0x4>

08005410 <sbrk_aligned>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4e0e      	ldr	r6, [pc, #56]	; (800544c <sbrk_aligned+0x3c>)
 8005414:	460c      	mov	r4, r1
 8005416:	6831      	ldr	r1, [r6, #0]
 8005418:	4605      	mov	r5, r0
 800541a:	b911      	cbnz	r1, 8005422 <sbrk_aligned+0x12>
 800541c:	f000 f8f6 	bl	800560c <_sbrk_r>
 8005420:	6030      	str	r0, [r6, #0]
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f000 f8f1 	bl	800560c <_sbrk_r>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d00a      	beq.n	8005444 <sbrk_aligned+0x34>
 800542e:	1cc4      	adds	r4, r0, #3
 8005430:	f024 0403 	bic.w	r4, r4, #3
 8005434:	42a0      	cmp	r0, r4
 8005436:	d007      	beq.n	8005448 <sbrk_aligned+0x38>
 8005438:	1a21      	subs	r1, r4, r0
 800543a:	4628      	mov	r0, r5
 800543c:	f000 f8e6 	bl	800560c <_sbrk_r>
 8005440:	3001      	adds	r0, #1
 8005442:	d101      	bne.n	8005448 <sbrk_aligned+0x38>
 8005444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005448:	4620      	mov	r0, r4
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	2000419c 	.word	0x2000419c

08005450 <_malloc_r>:
 8005450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005454:	1ccd      	adds	r5, r1, #3
 8005456:	f025 0503 	bic.w	r5, r5, #3
 800545a:	3508      	adds	r5, #8
 800545c:	2d0c      	cmp	r5, #12
 800545e:	bf38      	it	cc
 8005460:	250c      	movcc	r5, #12
 8005462:	2d00      	cmp	r5, #0
 8005464:	4607      	mov	r7, r0
 8005466:	db01      	blt.n	800546c <_malloc_r+0x1c>
 8005468:	42a9      	cmp	r1, r5
 800546a:	d905      	bls.n	8005478 <_malloc_r+0x28>
 800546c:	230c      	movs	r3, #12
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	2600      	movs	r6, #0
 8005472:	4630      	mov	r0, r6
 8005474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005478:	4e2e      	ldr	r6, [pc, #184]	; (8005534 <_malloc_r+0xe4>)
 800547a:	f000 f8f7 	bl	800566c <__malloc_lock>
 800547e:	6833      	ldr	r3, [r6, #0]
 8005480:	461c      	mov	r4, r3
 8005482:	bb34      	cbnz	r4, 80054d2 <_malloc_r+0x82>
 8005484:	4629      	mov	r1, r5
 8005486:	4638      	mov	r0, r7
 8005488:	f7ff ffc2 	bl	8005410 <sbrk_aligned>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	4604      	mov	r4, r0
 8005490:	d14d      	bne.n	800552e <_malloc_r+0xde>
 8005492:	6834      	ldr	r4, [r6, #0]
 8005494:	4626      	mov	r6, r4
 8005496:	2e00      	cmp	r6, #0
 8005498:	d140      	bne.n	800551c <_malloc_r+0xcc>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	4631      	mov	r1, r6
 800549e:	4638      	mov	r0, r7
 80054a0:	eb04 0803 	add.w	r8, r4, r3
 80054a4:	f000 f8b2 	bl	800560c <_sbrk_r>
 80054a8:	4580      	cmp	r8, r0
 80054aa:	d13a      	bne.n	8005522 <_malloc_r+0xd2>
 80054ac:	6821      	ldr	r1, [r4, #0]
 80054ae:	3503      	adds	r5, #3
 80054b0:	1a6d      	subs	r5, r5, r1
 80054b2:	f025 0503 	bic.w	r5, r5, #3
 80054b6:	3508      	adds	r5, #8
 80054b8:	2d0c      	cmp	r5, #12
 80054ba:	bf38      	it	cc
 80054bc:	250c      	movcc	r5, #12
 80054be:	4629      	mov	r1, r5
 80054c0:	4638      	mov	r0, r7
 80054c2:	f7ff ffa5 	bl	8005410 <sbrk_aligned>
 80054c6:	3001      	adds	r0, #1
 80054c8:	d02b      	beq.n	8005522 <_malloc_r+0xd2>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	442b      	add	r3, r5
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	e00e      	b.n	80054f0 <_malloc_r+0xa0>
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	1b52      	subs	r2, r2, r5
 80054d6:	d41e      	bmi.n	8005516 <_malloc_r+0xc6>
 80054d8:	2a0b      	cmp	r2, #11
 80054da:	d916      	bls.n	800550a <_malloc_r+0xba>
 80054dc:	1961      	adds	r1, r4, r5
 80054de:	42a3      	cmp	r3, r4
 80054e0:	6025      	str	r5, [r4, #0]
 80054e2:	bf18      	it	ne
 80054e4:	6059      	strne	r1, [r3, #4]
 80054e6:	6863      	ldr	r3, [r4, #4]
 80054e8:	bf08      	it	eq
 80054ea:	6031      	streq	r1, [r6, #0]
 80054ec:	5162      	str	r2, [r4, r5]
 80054ee:	604b      	str	r3, [r1, #4]
 80054f0:	4638      	mov	r0, r7
 80054f2:	f104 060b 	add.w	r6, r4, #11
 80054f6:	f000 f8bf 	bl	8005678 <__malloc_unlock>
 80054fa:	f026 0607 	bic.w	r6, r6, #7
 80054fe:	1d23      	adds	r3, r4, #4
 8005500:	1af2      	subs	r2, r6, r3
 8005502:	d0b6      	beq.n	8005472 <_malloc_r+0x22>
 8005504:	1b9b      	subs	r3, r3, r6
 8005506:	50a3      	str	r3, [r4, r2]
 8005508:	e7b3      	b.n	8005472 <_malloc_r+0x22>
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	42a3      	cmp	r3, r4
 800550e:	bf0c      	ite	eq
 8005510:	6032      	streq	r2, [r6, #0]
 8005512:	605a      	strne	r2, [r3, #4]
 8005514:	e7ec      	b.n	80054f0 <_malloc_r+0xa0>
 8005516:	4623      	mov	r3, r4
 8005518:	6864      	ldr	r4, [r4, #4]
 800551a:	e7b2      	b.n	8005482 <_malloc_r+0x32>
 800551c:	4634      	mov	r4, r6
 800551e:	6876      	ldr	r6, [r6, #4]
 8005520:	e7b9      	b.n	8005496 <_malloc_r+0x46>
 8005522:	230c      	movs	r3, #12
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	4638      	mov	r0, r7
 8005528:	f000 f8a6 	bl	8005678 <__malloc_unlock>
 800552c:	e7a1      	b.n	8005472 <_malloc_r+0x22>
 800552e:	6025      	str	r5, [r4, #0]
 8005530:	e7de      	b.n	80054f0 <_malloc_r+0xa0>
 8005532:	bf00      	nop
 8005534:	20004198 	.word	0x20004198

08005538 <cleanup_glue>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	6809      	ldr	r1, [r1, #0]
 800553e:	4605      	mov	r5, r0
 8005540:	b109      	cbz	r1, 8005546 <cleanup_glue+0xe>
 8005542:	f7ff fff9 	bl	8005538 <cleanup_glue>
 8005546:	4621      	mov	r1, r4
 8005548:	4628      	mov	r0, r5
 800554a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800554e:	f000 b899 	b.w	8005684 <_free_r>
	...

08005554 <_reclaim_reent>:
 8005554:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <_reclaim_reent+0xb4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4283      	cmp	r3, r0
 800555a:	b570      	push	{r4, r5, r6, lr}
 800555c:	4604      	mov	r4, r0
 800555e:	d051      	beq.n	8005604 <_reclaim_reent+0xb0>
 8005560:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005562:	b143      	cbz	r3, 8005576 <_reclaim_reent+0x22>
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d14a      	bne.n	8005600 <_reclaim_reent+0xac>
 800556a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	b111      	cbz	r1, 8005576 <_reclaim_reent+0x22>
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f887 	bl	8005684 <_free_r>
 8005576:	6961      	ldr	r1, [r4, #20]
 8005578:	b111      	cbz	r1, 8005580 <_reclaim_reent+0x2c>
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f882 	bl	8005684 <_free_r>
 8005580:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005582:	b111      	cbz	r1, 800558a <_reclaim_reent+0x36>
 8005584:	4620      	mov	r0, r4
 8005586:	f000 f87d 	bl	8005684 <_free_r>
 800558a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800558c:	b111      	cbz	r1, 8005594 <_reclaim_reent+0x40>
 800558e:	4620      	mov	r0, r4
 8005590:	f000 f878 	bl	8005684 <_free_r>
 8005594:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005596:	b111      	cbz	r1, 800559e <_reclaim_reent+0x4a>
 8005598:	4620      	mov	r0, r4
 800559a:	f000 f873 	bl	8005684 <_free_r>
 800559e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80055a0:	b111      	cbz	r1, 80055a8 <_reclaim_reent+0x54>
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 f86e 	bl	8005684 <_free_r>
 80055a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80055aa:	b111      	cbz	r1, 80055b2 <_reclaim_reent+0x5e>
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f869 	bl	8005684 <_free_r>
 80055b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80055b4:	b111      	cbz	r1, 80055bc <_reclaim_reent+0x68>
 80055b6:	4620      	mov	r0, r4
 80055b8:	f000 f864 	bl	8005684 <_free_r>
 80055bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055be:	b111      	cbz	r1, 80055c6 <_reclaim_reent+0x72>
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 f85f 	bl	8005684 <_free_r>
 80055c6:	69a3      	ldr	r3, [r4, #24]
 80055c8:	b1e3      	cbz	r3, 8005604 <_reclaim_reent+0xb0>
 80055ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055cc:	4620      	mov	r0, r4
 80055ce:	4798      	blx	r3
 80055d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80055d2:	b1b9      	cbz	r1, 8005604 <_reclaim_reent+0xb0>
 80055d4:	4620      	mov	r0, r4
 80055d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055da:	f7ff bfad 	b.w	8005538 <cleanup_glue>
 80055de:	5949      	ldr	r1, [r1, r5]
 80055e0:	b941      	cbnz	r1, 80055f4 <_reclaim_reent+0xa0>
 80055e2:	3504      	adds	r5, #4
 80055e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055e6:	2d80      	cmp	r5, #128	; 0x80
 80055e8:	68d9      	ldr	r1, [r3, #12]
 80055ea:	d1f8      	bne.n	80055de <_reclaim_reent+0x8a>
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 f849 	bl	8005684 <_free_r>
 80055f2:	e7ba      	b.n	800556a <_reclaim_reent+0x16>
 80055f4:	680e      	ldr	r6, [r1, #0]
 80055f6:	4620      	mov	r0, r4
 80055f8:	f000 f844 	bl	8005684 <_free_r>
 80055fc:	4631      	mov	r1, r6
 80055fe:	e7ef      	b.n	80055e0 <_reclaim_reent+0x8c>
 8005600:	2500      	movs	r5, #0
 8005602:	e7ef      	b.n	80055e4 <_reclaim_reent+0x90>
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	bf00      	nop
 8005608:	20000010 	.word	0x20000010

0800560c <_sbrk_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d06      	ldr	r5, [pc, #24]	; (8005628 <_sbrk_r+0x1c>)
 8005610:	2300      	movs	r3, #0
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	602b      	str	r3, [r5, #0]
 8005618:	f7fb fb6e 	bl	8000cf8 <_sbrk>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_sbrk_r+0x1a>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_sbrk_r+0x1a>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	200041a0 	.word	0x200041a0

0800562c <siprintf>:
 800562c:	b40e      	push	{r1, r2, r3}
 800562e:	b500      	push	{lr}
 8005630:	b09c      	sub	sp, #112	; 0x70
 8005632:	ab1d      	add	r3, sp, #116	; 0x74
 8005634:	9002      	str	r0, [sp, #8]
 8005636:	9006      	str	r0, [sp, #24]
 8005638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800563c:	4809      	ldr	r0, [pc, #36]	; (8005664 <siprintf+0x38>)
 800563e:	9107      	str	r1, [sp, #28]
 8005640:	9104      	str	r1, [sp, #16]
 8005642:	4909      	ldr	r1, [pc, #36]	; (8005668 <siprintf+0x3c>)
 8005644:	f853 2b04 	ldr.w	r2, [r3], #4
 8005648:	9105      	str	r1, [sp, #20]
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	a902      	add	r1, sp, #8
 8005650:	f000 f8c0 	bl	80057d4 <_svfiprintf_r>
 8005654:	9b02      	ldr	r3, [sp, #8]
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	b01c      	add	sp, #112	; 0x70
 800565c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005660:	b003      	add	sp, #12
 8005662:	4770      	bx	lr
 8005664:	20000010 	.word	0x20000010
 8005668:	ffff0208 	.word	0xffff0208

0800566c <__malloc_lock>:
 800566c:	4801      	ldr	r0, [pc, #4]	; (8005674 <__malloc_lock+0x8>)
 800566e:	f7ff beb7 	b.w	80053e0 <__retarget_lock_acquire_recursive>
 8005672:	bf00      	nop
 8005674:	20004194 	.word	0x20004194

08005678 <__malloc_unlock>:
 8005678:	4801      	ldr	r0, [pc, #4]	; (8005680 <__malloc_unlock+0x8>)
 800567a:	f7ff beb2 	b.w	80053e2 <__retarget_lock_release_recursive>
 800567e:	bf00      	nop
 8005680:	20004194 	.word	0x20004194

08005684 <_free_r>:
 8005684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005686:	2900      	cmp	r1, #0
 8005688:	d044      	beq.n	8005714 <_free_r+0x90>
 800568a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568e:	9001      	str	r0, [sp, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f1a1 0404 	sub.w	r4, r1, #4
 8005696:	bfb8      	it	lt
 8005698:	18e4      	addlt	r4, r4, r3
 800569a:	f7ff ffe7 	bl	800566c <__malloc_lock>
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <_free_r+0x94>)
 80056a0:	9801      	ldr	r0, [sp, #4]
 80056a2:	6813      	ldr	r3, [r2, #0]
 80056a4:	b933      	cbnz	r3, 80056b4 <_free_r+0x30>
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	6014      	str	r4, [r2, #0]
 80056aa:	b003      	add	sp, #12
 80056ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056b0:	f7ff bfe2 	b.w	8005678 <__malloc_unlock>
 80056b4:	42a3      	cmp	r3, r4
 80056b6:	d908      	bls.n	80056ca <_free_r+0x46>
 80056b8:	6825      	ldr	r5, [r4, #0]
 80056ba:	1961      	adds	r1, r4, r5
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf01      	itttt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	1949      	addeq	r1, r1, r5
 80056c6:	6021      	streq	r1, [r4, #0]
 80056c8:	e7ed      	b.n	80056a6 <_free_r+0x22>
 80056ca:	461a      	mov	r2, r3
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b10b      	cbz	r3, 80056d4 <_free_r+0x50>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d9fa      	bls.n	80056ca <_free_r+0x46>
 80056d4:	6811      	ldr	r1, [r2, #0]
 80056d6:	1855      	adds	r5, r2, r1
 80056d8:	42a5      	cmp	r5, r4
 80056da:	d10b      	bne.n	80056f4 <_free_r+0x70>
 80056dc:	6824      	ldr	r4, [r4, #0]
 80056de:	4421      	add	r1, r4
 80056e0:	1854      	adds	r4, r2, r1
 80056e2:	42a3      	cmp	r3, r4
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	d1e0      	bne.n	80056aa <_free_r+0x26>
 80056e8:	681c      	ldr	r4, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	6053      	str	r3, [r2, #4]
 80056ee:	4421      	add	r1, r4
 80056f0:	6011      	str	r1, [r2, #0]
 80056f2:	e7da      	b.n	80056aa <_free_r+0x26>
 80056f4:	d902      	bls.n	80056fc <_free_r+0x78>
 80056f6:	230c      	movs	r3, #12
 80056f8:	6003      	str	r3, [r0, #0]
 80056fa:	e7d6      	b.n	80056aa <_free_r+0x26>
 80056fc:	6825      	ldr	r5, [r4, #0]
 80056fe:	1961      	adds	r1, r4, r5
 8005700:	428b      	cmp	r3, r1
 8005702:	bf04      	itt	eq
 8005704:	6819      	ldreq	r1, [r3, #0]
 8005706:	685b      	ldreq	r3, [r3, #4]
 8005708:	6063      	str	r3, [r4, #4]
 800570a:	bf04      	itt	eq
 800570c:	1949      	addeq	r1, r1, r5
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	6054      	str	r4, [r2, #4]
 8005712:	e7ca      	b.n	80056aa <_free_r+0x26>
 8005714:	b003      	add	sp, #12
 8005716:	bd30      	pop	{r4, r5, pc}
 8005718:	20004198 	.word	0x20004198

0800571c <__ssputs_r>:
 800571c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	688e      	ldr	r6, [r1, #8]
 8005722:	429e      	cmp	r6, r3
 8005724:	4682      	mov	sl, r0
 8005726:	460c      	mov	r4, r1
 8005728:	4690      	mov	r8, r2
 800572a:	461f      	mov	r7, r3
 800572c:	d838      	bhi.n	80057a0 <__ssputs_r+0x84>
 800572e:	898a      	ldrh	r2, [r1, #12]
 8005730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005734:	d032      	beq.n	800579c <__ssputs_r+0x80>
 8005736:	6825      	ldr	r5, [r4, #0]
 8005738:	6909      	ldr	r1, [r1, #16]
 800573a:	eba5 0901 	sub.w	r9, r5, r1
 800573e:	6965      	ldr	r5, [r4, #20]
 8005740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005748:	3301      	adds	r3, #1
 800574a:	444b      	add	r3, r9
 800574c:	106d      	asrs	r5, r5, #1
 800574e:	429d      	cmp	r5, r3
 8005750:	bf38      	it	cc
 8005752:	461d      	movcc	r5, r3
 8005754:	0553      	lsls	r3, r2, #21
 8005756:	d531      	bpl.n	80057bc <__ssputs_r+0xa0>
 8005758:	4629      	mov	r1, r5
 800575a:	f7ff fe79 	bl	8005450 <_malloc_r>
 800575e:	4606      	mov	r6, r0
 8005760:	b950      	cbnz	r0, 8005778 <__ssputs_r+0x5c>
 8005762:	230c      	movs	r3, #12
 8005764:	f8ca 3000 	str.w	r3, [sl]
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005778:	6921      	ldr	r1, [r4, #16]
 800577a:	464a      	mov	r2, r9
 800577c:	f7ff fe32 	bl	80053e4 <memcpy>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	81a3      	strh	r3, [r4, #12]
 800578c:	6126      	str	r6, [r4, #16]
 800578e:	6165      	str	r5, [r4, #20]
 8005790:	444e      	add	r6, r9
 8005792:	eba5 0509 	sub.w	r5, r5, r9
 8005796:	6026      	str	r6, [r4, #0]
 8005798:	60a5      	str	r5, [r4, #8]
 800579a:	463e      	mov	r6, r7
 800579c:	42be      	cmp	r6, r7
 800579e:	d900      	bls.n	80057a2 <__ssputs_r+0x86>
 80057a0:	463e      	mov	r6, r7
 80057a2:	6820      	ldr	r0, [r4, #0]
 80057a4:	4632      	mov	r2, r6
 80057a6:	4641      	mov	r1, r8
 80057a8:	f000 faa8 	bl	8005cfc <memmove>
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	1b9b      	subs	r3, r3, r6
 80057b0:	60a3      	str	r3, [r4, #8]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	4433      	add	r3, r6
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	2000      	movs	r0, #0
 80057ba:	e7db      	b.n	8005774 <__ssputs_r+0x58>
 80057bc:	462a      	mov	r2, r5
 80057be:	f000 fab7 	bl	8005d30 <_realloc_r>
 80057c2:	4606      	mov	r6, r0
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d1e1      	bne.n	800578c <__ssputs_r+0x70>
 80057c8:	6921      	ldr	r1, [r4, #16]
 80057ca:	4650      	mov	r0, sl
 80057cc:	f7ff ff5a 	bl	8005684 <_free_r>
 80057d0:	e7c7      	b.n	8005762 <__ssputs_r+0x46>
	...

080057d4 <_svfiprintf_r>:
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	4698      	mov	r8, r3
 80057da:	898b      	ldrh	r3, [r1, #12]
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	b09d      	sub	sp, #116	; 0x74
 80057e0:	4607      	mov	r7, r0
 80057e2:	460d      	mov	r5, r1
 80057e4:	4614      	mov	r4, r2
 80057e6:	d50e      	bpl.n	8005806 <_svfiprintf_r+0x32>
 80057e8:	690b      	ldr	r3, [r1, #16]
 80057ea:	b963      	cbnz	r3, 8005806 <_svfiprintf_r+0x32>
 80057ec:	2140      	movs	r1, #64	; 0x40
 80057ee:	f7ff fe2f 	bl	8005450 <_malloc_r>
 80057f2:	6028      	str	r0, [r5, #0]
 80057f4:	6128      	str	r0, [r5, #16]
 80057f6:	b920      	cbnz	r0, 8005802 <_svfiprintf_r+0x2e>
 80057f8:	230c      	movs	r3, #12
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005800:	e0d1      	b.n	80059a6 <_svfiprintf_r+0x1d2>
 8005802:	2340      	movs	r3, #64	; 0x40
 8005804:	616b      	str	r3, [r5, #20]
 8005806:	2300      	movs	r3, #0
 8005808:	9309      	str	r3, [sp, #36]	; 0x24
 800580a:	2320      	movs	r3, #32
 800580c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005810:	f8cd 800c 	str.w	r8, [sp, #12]
 8005814:	2330      	movs	r3, #48	; 0x30
 8005816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80059c0 <_svfiprintf_r+0x1ec>
 800581a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800581e:	f04f 0901 	mov.w	r9, #1
 8005822:	4623      	mov	r3, r4
 8005824:	469a      	mov	sl, r3
 8005826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800582a:	b10a      	cbz	r2, 8005830 <_svfiprintf_r+0x5c>
 800582c:	2a25      	cmp	r2, #37	; 0x25
 800582e:	d1f9      	bne.n	8005824 <_svfiprintf_r+0x50>
 8005830:	ebba 0b04 	subs.w	fp, sl, r4
 8005834:	d00b      	beq.n	800584e <_svfiprintf_r+0x7a>
 8005836:	465b      	mov	r3, fp
 8005838:	4622      	mov	r2, r4
 800583a:	4629      	mov	r1, r5
 800583c:	4638      	mov	r0, r7
 800583e:	f7ff ff6d 	bl	800571c <__ssputs_r>
 8005842:	3001      	adds	r0, #1
 8005844:	f000 80aa 	beq.w	800599c <_svfiprintf_r+0x1c8>
 8005848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800584a:	445a      	add	r2, fp
 800584c:	9209      	str	r2, [sp, #36]	; 0x24
 800584e:	f89a 3000 	ldrb.w	r3, [sl]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80a2 	beq.w	800599c <_svfiprintf_r+0x1c8>
 8005858:	2300      	movs	r3, #0
 800585a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800585e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005862:	f10a 0a01 	add.w	sl, sl, #1
 8005866:	9304      	str	r3, [sp, #16]
 8005868:	9307      	str	r3, [sp, #28]
 800586a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800586e:	931a      	str	r3, [sp, #104]	; 0x68
 8005870:	4654      	mov	r4, sl
 8005872:	2205      	movs	r2, #5
 8005874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005878:	4851      	ldr	r0, [pc, #324]	; (80059c0 <_svfiprintf_r+0x1ec>)
 800587a:	f7fa fca9 	bl	80001d0 <memchr>
 800587e:	9a04      	ldr	r2, [sp, #16]
 8005880:	b9d8      	cbnz	r0, 80058ba <_svfiprintf_r+0xe6>
 8005882:	06d0      	lsls	r0, r2, #27
 8005884:	bf44      	itt	mi
 8005886:	2320      	movmi	r3, #32
 8005888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800588c:	0711      	lsls	r1, r2, #28
 800588e:	bf44      	itt	mi
 8005890:	232b      	movmi	r3, #43	; 0x2b
 8005892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005896:	f89a 3000 	ldrb.w	r3, [sl]
 800589a:	2b2a      	cmp	r3, #42	; 0x2a
 800589c:	d015      	beq.n	80058ca <_svfiprintf_r+0xf6>
 800589e:	9a07      	ldr	r2, [sp, #28]
 80058a0:	4654      	mov	r4, sl
 80058a2:	2000      	movs	r0, #0
 80058a4:	f04f 0c0a 	mov.w	ip, #10
 80058a8:	4621      	mov	r1, r4
 80058aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ae:	3b30      	subs	r3, #48	; 0x30
 80058b0:	2b09      	cmp	r3, #9
 80058b2:	d94e      	bls.n	8005952 <_svfiprintf_r+0x17e>
 80058b4:	b1b0      	cbz	r0, 80058e4 <_svfiprintf_r+0x110>
 80058b6:	9207      	str	r2, [sp, #28]
 80058b8:	e014      	b.n	80058e4 <_svfiprintf_r+0x110>
 80058ba:	eba0 0308 	sub.w	r3, r0, r8
 80058be:	fa09 f303 	lsl.w	r3, r9, r3
 80058c2:	4313      	orrs	r3, r2
 80058c4:	9304      	str	r3, [sp, #16]
 80058c6:	46a2      	mov	sl, r4
 80058c8:	e7d2      	b.n	8005870 <_svfiprintf_r+0x9c>
 80058ca:	9b03      	ldr	r3, [sp, #12]
 80058cc:	1d19      	adds	r1, r3, #4
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	9103      	str	r1, [sp, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bfbb      	ittet	lt
 80058d6:	425b      	neglt	r3, r3
 80058d8:	f042 0202 	orrlt.w	r2, r2, #2
 80058dc:	9307      	strge	r3, [sp, #28]
 80058de:	9307      	strlt	r3, [sp, #28]
 80058e0:	bfb8      	it	lt
 80058e2:	9204      	strlt	r2, [sp, #16]
 80058e4:	7823      	ldrb	r3, [r4, #0]
 80058e6:	2b2e      	cmp	r3, #46	; 0x2e
 80058e8:	d10c      	bne.n	8005904 <_svfiprintf_r+0x130>
 80058ea:	7863      	ldrb	r3, [r4, #1]
 80058ec:	2b2a      	cmp	r3, #42	; 0x2a
 80058ee:	d135      	bne.n	800595c <_svfiprintf_r+0x188>
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	1d1a      	adds	r2, r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	9203      	str	r2, [sp, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfb8      	it	lt
 80058fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005900:	3402      	adds	r4, #2
 8005902:	9305      	str	r3, [sp, #20]
 8005904:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059d0 <_svfiprintf_r+0x1fc>
 8005908:	7821      	ldrb	r1, [r4, #0]
 800590a:	2203      	movs	r2, #3
 800590c:	4650      	mov	r0, sl
 800590e:	f7fa fc5f 	bl	80001d0 <memchr>
 8005912:	b140      	cbz	r0, 8005926 <_svfiprintf_r+0x152>
 8005914:	2340      	movs	r3, #64	; 0x40
 8005916:	eba0 000a 	sub.w	r0, r0, sl
 800591a:	fa03 f000 	lsl.w	r0, r3, r0
 800591e:	9b04      	ldr	r3, [sp, #16]
 8005920:	4303      	orrs	r3, r0
 8005922:	3401      	adds	r4, #1
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800592a:	4826      	ldr	r0, [pc, #152]	; (80059c4 <_svfiprintf_r+0x1f0>)
 800592c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005930:	2206      	movs	r2, #6
 8005932:	f7fa fc4d 	bl	80001d0 <memchr>
 8005936:	2800      	cmp	r0, #0
 8005938:	d038      	beq.n	80059ac <_svfiprintf_r+0x1d8>
 800593a:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <_svfiprintf_r+0x1f4>)
 800593c:	bb1b      	cbnz	r3, 8005986 <_svfiprintf_r+0x1b2>
 800593e:	9b03      	ldr	r3, [sp, #12]
 8005940:	3307      	adds	r3, #7
 8005942:	f023 0307 	bic.w	r3, r3, #7
 8005946:	3308      	adds	r3, #8
 8005948:	9303      	str	r3, [sp, #12]
 800594a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594c:	4433      	add	r3, r6
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	e767      	b.n	8005822 <_svfiprintf_r+0x4e>
 8005952:	fb0c 3202 	mla	r2, ip, r2, r3
 8005956:	460c      	mov	r4, r1
 8005958:	2001      	movs	r0, #1
 800595a:	e7a5      	b.n	80058a8 <_svfiprintf_r+0xd4>
 800595c:	2300      	movs	r3, #0
 800595e:	3401      	adds	r4, #1
 8005960:	9305      	str	r3, [sp, #20]
 8005962:	4619      	mov	r1, r3
 8005964:	f04f 0c0a 	mov.w	ip, #10
 8005968:	4620      	mov	r0, r4
 800596a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800596e:	3a30      	subs	r2, #48	; 0x30
 8005970:	2a09      	cmp	r2, #9
 8005972:	d903      	bls.n	800597c <_svfiprintf_r+0x1a8>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0c5      	beq.n	8005904 <_svfiprintf_r+0x130>
 8005978:	9105      	str	r1, [sp, #20]
 800597a:	e7c3      	b.n	8005904 <_svfiprintf_r+0x130>
 800597c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005980:	4604      	mov	r4, r0
 8005982:	2301      	movs	r3, #1
 8005984:	e7f0      	b.n	8005968 <_svfiprintf_r+0x194>
 8005986:	ab03      	add	r3, sp, #12
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	462a      	mov	r2, r5
 800598c:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <_svfiprintf_r+0x1f8>)
 800598e:	a904      	add	r1, sp, #16
 8005990:	4638      	mov	r0, r7
 8005992:	f3af 8000 	nop.w
 8005996:	1c42      	adds	r2, r0, #1
 8005998:	4606      	mov	r6, r0
 800599a:	d1d6      	bne.n	800594a <_svfiprintf_r+0x176>
 800599c:	89ab      	ldrh	r3, [r5, #12]
 800599e:	065b      	lsls	r3, r3, #25
 80059a0:	f53f af2c 	bmi.w	80057fc <_svfiprintf_r+0x28>
 80059a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a6:	b01d      	add	sp, #116	; 0x74
 80059a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ac:	ab03      	add	r3, sp, #12
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <_svfiprintf_r+0x1f8>)
 80059b4:	a904      	add	r1, sp, #16
 80059b6:	4638      	mov	r0, r7
 80059b8:	f000 f87a 	bl	8005ab0 <_printf_i>
 80059bc:	e7eb      	b.n	8005996 <_svfiprintf_r+0x1c2>
 80059be:	bf00      	nop
 80059c0:	08005ea8 	.word	0x08005ea8
 80059c4:	08005eb2 	.word	0x08005eb2
 80059c8:	00000000 	.word	0x00000000
 80059cc:	0800571d 	.word	0x0800571d
 80059d0:	08005eae 	.word	0x08005eae

080059d4 <_printf_common>:
 80059d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	4616      	mov	r6, r2
 80059da:	4699      	mov	r9, r3
 80059dc:	688a      	ldr	r2, [r1, #8]
 80059de:	690b      	ldr	r3, [r1, #16]
 80059e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bfb8      	it	lt
 80059e8:	4613      	movlt	r3, r2
 80059ea:	6033      	str	r3, [r6, #0]
 80059ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f0:	4607      	mov	r7, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	b10a      	cbz	r2, 80059fa <_printf_common+0x26>
 80059f6:	3301      	adds	r3, #1
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	0699      	lsls	r1, r3, #26
 80059fe:	bf42      	ittt	mi
 8005a00:	6833      	ldrmi	r3, [r6, #0]
 8005a02:	3302      	addmi	r3, #2
 8005a04:	6033      	strmi	r3, [r6, #0]
 8005a06:	6825      	ldr	r5, [r4, #0]
 8005a08:	f015 0506 	ands.w	r5, r5, #6
 8005a0c:	d106      	bne.n	8005a1c <_printf_common+0x48>
 8005a0e:	f104 0a19 	add.w	sl, r4, #25
 8005a12:	68e3      	ldr	r3, [r4, #12]
 8005a14:	6832      	ldr	r2, [r6, #0]
 8005a16:	1a9b      	subs	r3, r3, r2
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	dc26      	bgt.n	8005a6a <_printf_common+0x96>
 8005a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a20:	1e13      	subs	r3, r2, #0
 8005a22:	6822      	ldr	r2, [r4, #0]
 8005a24:	bf18      	it	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	0692      	lsls	r2, r2, #26
 8005a2a:	d42b      	bmi.n	8005a84 <_printf_common+0xb0>
 8005a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a30:	4649      	mov	r1, r9
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c0      	blx	r8
 8005a36:	3001      	adds	r0, #1
 8005a38:	d01e      	beq.n	8005a78 <_printf_common+0xa4>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	68e5      	ldr	r5, [r4, #12]
 8005a3e:	6832      	ldr	r2, [r6, #0]
 8005a40:	f003 0306 	and.w	r3, r3, #6
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	bf08      	it	eq
 8005a48:	1aad      	subeq	r5, r5, r2
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	6922      	ldr	r2, [r4, #16]
 8005a4e:	bf0c      	ite	eq
 8005a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a54:	2500      	movne	r5, #0
 8005a56:	4293      	cmp	r3, r2
 8005a58:	bfc4      	itt	gt
 8005a5a:	1a9b      	subgt	r3, r3, r2
 8005a5c:	18ed      	addgt	r5, r5, r3
 8005a5e:	2600      	movs	r6, #0
 8005a60:	341a      	adds	r4, #26
 8005a62:	42b5      	cmp	r5, r6
 8005a64:	d11a      	bne.n	8005a9c <_printf_common+0xc8>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e008      	b.n	8005a7c <_printf_common+0xa8>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4652      	mov	r2, sl
 8005a6e:	4649      	mov	r1, r9
 8005a70:	4638      	mov	r0, r7
 8005a72:	47c0      	blx	r8
 8005a74:	3001      	adds	r0, #1
 8005a76:	d103      	bne.n	8005a80 <_printf_common+0xac>
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a80:	3501      	adds	r5, #1
 8005a82:	e7c6      	b.n	8005a12 <_printf_common+0x3e>
 8005a84:	18e1      	adds	r1, r4, r3
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	2030      	movs	r0, #48	; 0x30
 8005a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a8e:	4422      	add	r2, r4
 8005a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a98:	3302      	adds	r3, #2
 8005a9a:	e7c7      	b.n	8005a2c <_printf_common+0x58>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c0      	blx	r8
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d0e6      	beq.n	8005a78 <_printf_common+0xa4>
 8005aaa:	3601      	adds	r6, #1
 8005aac:	e7d9      	b.n	8005a62 <_printf_common+0x8e>
	...

08005ab0 <_printf_i>:
 8005ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	7e0f      	ldrb	r7, [r1, #24]
 8005ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ab8:	2f78      	cmp	r7, #120	; 0x78
 8005aba:	4691      	mov	r9, r2
 8005abc:	4680      	mov	r8, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	469a      	mov	sl, r3
 8005ac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ac6:	d807      	bhi.n	8005ad8 <_printf_i+0x28>
 8005ac8:	2f62      	cmp	r7, #98	; 0x62
 8005aca:	d80a      	bhi.n	8005ae2 <_printf_i+0x32>
 8005acc:	2f00      	cmp	r7, #0
 8005ace:	f000 80d8 	beq.w	8005c82 <_printf_i+0x1d2>
 8005ad2:	2f58      	cmp	r7, #88	; 0x58
 8005ad4:	f000 80a3 	beq.w	8005c1e <_printf_i+0x16e>
 8005ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ae0:	e03a      	b.n	8005b58 <_printf_i+0xa8>
 8005ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ae6:	2b15      	cmp	r3, #21
 8005ae8:	d8f6      	bhi.n	8005ad8 <_printf_i+0x28>
 8005aea:	a101      	add	r1, pc, #4	; (adr r1, 8005af0 <_printf_i+0x40>)
 8005aec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005af0:	08005b49 	.word	0x08005b49
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005ad9 	.word	0x08005ad9
 8005afc:	08005ad9 	.word	0x08005ad9
 8005b00:	08005ad9 	.word	0x08005ad9
 8005b04:	08005ad9 	.word	0x08005ad9
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005ad9 	.word	0x08005ad9
 8005b10:	08005ad9 	.word	0x08005ad9
 8005b14:	08005ad9 	.word	0x08005ad9
 8005b18:	08005ad9 	.word	0x08005ad9
 8005b1c:	08005c69 	.word	0x08005c69
 8005b20:	08005b8d 	.word	0x08005b8d
 8005b24:	08005c4b 	.word	0x08005c4b
 8005b28:	08005ad9 	.word	0x08005ad9
 8005b2c:	08005ad9 	.word	0x08005ad9
 8005b30:	08005c8b 	.word	0x08005c8b
 8005b34:	08005ad9 	.word	0x08005ad9
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005ad9 	.word	0x08005ad9
 8005b40:	08005ad9 	.word	0x08005ad9
 8005b44:	08005c53 	.word	0x08005c53
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	1d1a      	adds	r2, r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	602a      	str	r2, [r5, #0]
 8005b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0a3      	b.n	8005ca4 <_printf_i+0x1f4>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	6829      	ldr	r1, [r5, #0]
 8005b60:	0606      	lsls	r6, r0, #24
 8005b62:	f101 0304 	add.w	r3, r1, #4
 8005b66:	d50a      	bpl.n	8005b7e <_printf_i+0xce>
 8005b68:	680e      	ldr	r6, [r1, #0]
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	2e00      	cmp	r6, #0
 8005b6e:	da03      	bge.n	8005b78 <_printf_i+0xc8>
 8005b70:	232d      	movs	r3, #45	; 0x2d
 8005b72:	4276      	negs	r6, r6
 8005b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b78:	485e      	ldr	r0, [pc, #376]	; (8005cf4 <_printf_i+0x244>)
 8005b7a:	230a      	movs	r3, #10
 8005b7c:	e019      	b.n	8005bb2 <_printf_i+0x102>
 8005b7e:	680e      	ldr	r6, [r1, #0]
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b86:	bf18      	it	ne
 8005b88:	b236      	sxthne	r6, r6
 8005b8a:	e7ef      	b.n	8005b6c <_printf_i+0xbc>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	1d19      	adds	r1, r3, #4
 8005b92:	6029      	str	r1, [r5, #0]
 8005b94:	0601      	lsls	r1, r0, #24
 8005b96:	d501      	bpl.n	8005b9c <_printf_i+0xec>
 8005b98:	681e      	ldr	r6, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <_printf_i+0xf2>
 8005b9c:	0646      	lsls	r6, r0, #25
 8005b9e:	d5fb      	bpl.n	8005b98 <_printf_i+0xe8>
 8005ba0:	881e      	ldrh	r6, [r3, #0]
 8005ba2:	4854      	ldr	r0, [pc, #336]	; (8005cf4 <_printf_i+0x244>)
 8005ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ba6:	bf0c      	ite	eq
 8005ba8:	2308      	moveq	r3, #8
 8005baa:	230a      	movne	r3, #10
 8005bac:	2100      	movs	r1, #0
 8005bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bb2:	6865      	ldr	r5, [r4, #4]
 8005bb4:	60a5      	str	r5, [r4, #8]
 8005bb6:	2d00      	cmp	r5, #0
 8005bb8:	bfa2      	ittt	ge
 8005bba:	6821      	ldrge	r1, [r4, #0]
 8005bbc:	f021 0104 	bicge.w	r1, r1, #4
 8005bc0:	6021      	strge	r1, [r4, #0]
 8005bc2:	b90e      	cbnz	r6, 8005bc8 <_printf_i+0x118>
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	d04d      	beq.n	8005c64 <_printf_i+0x1b4>
 8005bc8:	4615      	mov	r5, r2
 8005bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bce:	fb03 6711 	mls	r7, r3, r1, r6
 8005bd2:	5dc7      	ldrb	r7, [r0, r7]
 8005bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bd8:	4637      	mov	r7, r6
 8005bda:	42bb      	cmp	r3, r7
 8005bdc:	460e      	mov	r6, r1
 8005bde:	d9f4      	bls.n	8005bca <_printf_i+0x11a>
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d10b      	bne.n	8005bfc <_printf_i+0x14c>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	07de      	lsls	r6, r3, #31
 8005be8:	d508      	bpl.n	8005bfc <_printf_i+0x14c>
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	6861      	ldr	r1, [r4, #4]
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	bfde      	ittt	le
 8005bf2:	2330      	movle	r3, #48	; 0x30
 8005bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005bfc:	1b52      	subs	r2, r2, r5
 8005bfe:	6122      	str	r2, [r4, #16]
 8005c00:	f8cd a000 	str.w	sl, [sp]
 8005c04:	464b      	mov	r3, r9
 8005c06:	aa03      	add	r2, sp, #12
 8005c08:	4621      	mov	r1, r4
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	f7ff fee2 	bl	80059d4 <_printf_common>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d14c      	bne.n	8005cae <_printf_i+0x1fe>
 8005c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c18:	b004      	add	sp, #16
 8005c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c1e:	4835      	ldr	r0, [pc, #212]	; (8005cf4 <_printf_i+0x244>)
 8005c20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c24:	6829      	ldr	r1, [r5, #0]
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c2c:	6029      	str	r1, [r5, #0]
 8005c2e:	061d      	lsls	r5, r3, #24
 8005c30:	d514      	bpl.n	8005c5c <_printf_i+0x1ac>
 8005c32:	07df      	lsls	r7, r3, #31
 8005c34:	bf44      	itt	mi
 8005c36:	f043 0320 	orrmi.w	r3, r3, #32
 8005c3a:	6023      	strmi	r3, [r4, #0]
 8005c3c:	b91e      	cbnz	r6, 8005c46 <_printf_i+0x196>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	f023 0320 	bic.w	r3, r3, #32
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	2310      	movs	r3, #16
 8005c48:	e7b0      	b.n	8005bac <_printf_i+0xfc>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	f043 0320 	orr.w	r3, r3, #32
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	2378      	movs	r3, #120	; 0x78
 8005c54:	4828      	ldr	r0, [pc, #160]	; (8005cf8 <_printf_i+0x248>)
 8005c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c5a:	e7e3      	b.n	8005c24 <_printf_i+0x174>
 8005c5c:	0659      	lsls	r1, r3, #25
 8005c5e:	bf48      	it	mi
 8005c60:	b2b6      	uxthmi	r6, r6
 8005c62:	e7e6      	b.n	8005c32 <_printf_i+0x182>
 8005c64:	4615      	mov	r5, r2
 8005c66:	e7bb      	b.n	8005be0 <_printf_i+0x130>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	6826      	ldr	r6, [r4, #0]
 8005c6c:	6961      	ldr	r1, [r4, #20]
 8005c6e:	1d18      	adds	r0, r3, #4
 8005c70:	6028      	str	r0, [r5, #0]
 8005c72:	0635      	lsls	r5, r6, #24
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0x1cc>
 8005c78:	6019      	str	r1, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0x1d2>
 8005c7c:	0670      	lsls	r0, r6, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0x1c8>
 8005c80:	8019      	strh	r1, [r3, #0]
 8005c82:	2300      	movs	r3, #0
 8005c84:	6123      	str	r3, [r4, #16]
 8005c86:	4615      	mov	r5, r2
 8005c88:	e7ba      	b.n	8005c00 <_printf_i+0x150>
 8005c8a:	682b      	ldr	r3, [r5, #0]
 8005c8c:	1d1a      	adds	r2, r3, #4
 8005c8e:	602a      	str	r2, [r5, #0]
 8005c90:	681d      	ldr	r5, [r3, #0]
 8005c92:	6862      	ldr	r2, [r4, #4]
 8005c94:	2100      	movs	r1, #0
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7fa fa9a 	bl	80001d0 <memchr>
 8005c9c:	b108      	cbz	r0, 8005ca2 <_printf_i+0x1f2>
 8005c9e:	1b40      	subs	r0, r0, r5
 8005ca0:	6060      	str	r0, [r4, #4]
 8005ca2:	6863      	ldr	r3, [r4, #4]
 8005ca4:	6123      	str	r3, [r4, #16]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cac:	e7a8      	b.n	8005c00 <_printf_i+0x150>
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	462a      	mov	r2, r5
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	47d0      	blx	sl
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d0ab      	beq.n	8005c14 <_printf_i+0x164>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	079b      	lsls	r3, r3, #30
 8005cc0:	d413      	bmi.n	8005cea <_printf_i+0x23a>
 8005cc2:	68e0      	ldr	r0, [r4, #12]
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	4298      	cmp	r0, r3
 8005cc8:	bfb8      	it	lt
 8005cca:	4618      	movlt	r0, r3
 8005ccc:	e7a4      	b.n	8005c18 <_printf_i+0x168>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	47d0      	blx	sl
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d09b      	beq.n	8005c14 <_printf_i+0x164>
 8005cdc:	3501      	adds	r5, #1
 8005cde:	68e3      	ldr	r3, [r4, #12]
 8005ce0:	9903      	ldr	r1, [sp, #12]
 8005ce2:	1a5b      	subs	r3, r3, r1
 8005ce4:	42ab      	cmp	r3, r5
 8005ce6:	dcf2      	bgt.n	8005cce <_printf_i+0x21e>
 8005ce8:	e7eb      	b.n	8005cc2 <_printf_i+0x212>
 8005cea:	2500      	movs	r5, #0
 8005cec:	f104 0619 	add.w	r6, r4, #25
 8005cf0:	e7f5      	b.n	8005cde <_printf_i+0x22e>
 8005cf2:	bf00      	nop
 8005cf4:	08005eb9 	.word	0x08005eb9
 8005cf8:	08005eca 	.word	0x08005eca

08005cfc <memmove>:
 8005cfc:	4288      	cmp	r0, r1
 8005cfe:	b510      	push	{r4, lr}
 8005d00:	eb01 0402 	add.w	r4, r1, r2
 8005d04:	d902      	bls.n	8005d0c <memmove+0x10>
 8005d06:	4284      	cmp	r4, r0
 8005d08:	4623      	mov	r3, r4
 8005d0a:	d807      	bhi.n	8005d1c <memmove+0x20>
 8005d0c:	1e43      	subs	r3, r0, #1
 8005d0e:	42a1      	cmp	r1, r4
 8005d10:	d008      	beq.n	8005d24 <memmove+0x28>
 8005d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d1a:	e7f8      	b.n	8005d0e <memmove+0x12>
 8005d1c:	4402      	add	r2, r0
 8005d1e:	4601      	mov	r1, r0
 8005d20:	428a      	cmp	r2, r1
 8005d22:	d100      	bne.n	8005d26 <memmove+0x2a>
 8005d24:	bd10      	pop	{r4, pc}
 8005d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d2e:	e7f7      	b.n	8005d20 <memmove+0x24>

08005d30 <_realloc_r>:
 8005d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d34:	4680      	mov	r8, r0
 8005d36:	4614      	mov	r4, r2
 8005d38:	460e      	mov	r6, r1
 8005d3a:	b921      	cbnz	r1, 8005d46 <_realloc_r+0x16>
 8005d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d40:	4611      	mov	r1, r2
 8005d42:	f7ff bb85 	b.w	8005450 <_malloc_r>
 8005d46:	b92a      	cbnz	r2, 8005d54 <_realloc_r+0x24>
 8005d48:	f7ff fc9c 	bl	8005684 <_free_r>
 8005d4c:	4625      	mov	r5, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	f000 f81b 	bl	8005d8e <_malloc_usable_size_r>
 8005d58:	4284      	cmp	r4, r0
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	d802      	bhi.n	8005d64 <_realloc_r+0x34>
 8005d5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d62:	d812      	bhi.n	8005d8a <_realloc_r+0x5a>
 8005d64:	4621      	mov	r1, r4
 8005d66:	4640      	mov	r0, r8
 8005d68:	f7ff fb72 	bl	8005450 <_malloc_r>
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d0ed      	beq.n	8005d4e <_realloc_r+0x1e>
 8005d72:	42bc      	cmp	r4, r7
 8005d74:	4622      	mov	r2, r4
 8005d76:	4631      	mov	r1, r6
 8005d78:	bf28      	it	cs
 8005d7a:	463a      	movcs	r2, r7
 8005d7c:	f7ff fb32 	bl	80053e4 <memcpy>
 8005d80:	4631      	mov	r1, r6
 8005d82:	4640      	mov	r0, r8
 8005d84:	f7ff fc7e 	bl	8005684 <_free_r>
 8005d88:	e7e1      	b.n	8005d4e <_realloc_r+0x1e>
 8005d8a:	4635      	mov	r5, r6
 8005d8c:	e7df      	b.n	8005d4e <_realloc_r+0x1e>

08005d8e <_malloc_usable_size_r>:
 8005d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d92:	1f18      	subs	r0, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bfbc      	itt	lt
 8005d98:	580b      	ldrlt	r3, [r1, r0]
 8005d9a:	18c0      	addlt	r0, r0, r3
 8005d9c:	4770      	bx	lr
	...

08005da0 <_init>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr

08005dac <_fini>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr
